package com.speakaboos.ipad.controller{	import com.milkmangames.nativeextensions.GoViral;	import com.speakaboos.ipad.events.AppEvents;	import com.speakaboos.ipad.events.GenericDataEvent;	import com.speakaboos.ipad.events.LoginEvents;	import com.speakaboos.ipad.events.ModalEvents;	import com.speakaboos.ipad.events.NavEvents;	import com.speakaboos.ipad.events.SubscriptionEvents;	import com.speakaboos.ipad.models.data.ModalData;	import com.speakaboos.ipad.models.data.ModalsInfo;	import com.speakaboos.ipad.models.data.UserProfile;	import com.speakaboos.ipad.utils.ObjectUtils;	import com.speakaboos.ipad.utils.TextUtil;	import com.speakaboos.ipad.utils.Validation;	import com.speakaboos.ipad.view.holders.CoreMovieClipHolder;	import com.speakaboos.ipad.view.holders.components.TextFieldScroller;	import com.speakaboos.ipad.view.holders.modals.ModalDialog;		import flash.debugger.enterDebugger;	import flash.display.MovieClip;	import flash.events.Event;	import flash.net.URLRequest;	import flash.net.navigateToURL;		public class ModalController extends CoreMovieClipHolder	{		private var _appController:AppController;		//This is public so that CoreModals can check to 		//see if they're currently at the top level		private var _modalStack:Vector.<Object>;				private var _curModals: Vector.<ModalDialog>;		private var _curModalLookup: Vector.<Class>;		private var _containers: Vector.<MovieClip>;		private const _MAIN_MODAL_INDEX:int = 0;		private const _MESSAGE_MODAL_INDEX:int = 1;		private const _LOADER_INDEX:int = 2;		private const _DEBUG_LOG_INDEX:int = 3;		private static var _logString:String;		// vars for testing modals		private var _mainModal:ModalDialog;		private var _messageModal:ModalDialog;		private var _debugArray:Array;		private var _modal:ModalDialog;						// set up log window to use large background of new dialogs... maybe it is another slot in array, or just above the other modals...		// also spinner for loader...						public function ModalController(controller:AppController)		{			super(new MovieClip());			_appController = controller;			init();		}				private function init():void {			_logString = "";			_curModalLookup = new <Class>[ModalsInfo.MAIN_MODAL_TYPE, ModalsInfo.MESSAGE_MODAL_TYPE, ModalsInfo.LOADER_TYPE, ModalsInfo.DEBUG_LOG_TYPE];			_curModalLookup.fixed = true;			var i:int, n:int = _curModalLookup.length;			_curModals = new Vector.<ModalDialog>(n, true);			_containers = new Vector.<MovieClip>(n, true);			var cont:MovieClip;			for (i=0; i<n; i++) {				cont = new MovieClip;				mc.addChild(cont);				_containers[i] = cont;			}			_modalStack = new Vector.<Object>();		}				override public function onAddedToStage(e:Event=null):void {			addEventListeners();		}				override public function onRemovedFromStage(e:Event=null):void {			removeEventListeners();		}				private function addEventListeners():void {			log("addEventListeners " + stage);			//			flash.debugger.enterDebugger();			_eventDispatcher.addEventListener(ModalEvents.OPEN_EXTERNAL_URL, receiveEvent);			_eventDispatcher.addEventListener(ModalEvents.OPEN_MAIL_DOC, receiveEvent);			_eventDispatcher.addEventListener(ModalEvents.SHOW_LOG, receiveEvent);			_eventDispatcher.addEventListener(ModalEvents.SHOW_LOADER, receiveEvent);			_eventDispatcher.addEventListener(ModalEvents.HIDE_LOADER, receiveEvent);			_eventDispatcher.addEventListener(ModalEvents.SHOW_MODAL, receiveEvent);			_eventDispatcher.addEventListener(ModalEvents.CLOSE_MODAL, receiveEvent);			_eventDispatcher.addEventListener(ModalEvents.CLOSE_ALL_MODALS, receiveEvent);			_eventDispatcher.addEventListener(ModalEvents.CLOSE_MESSAGE_MODALS, receiveEvent);			_eventDispatcher.addEventListener(ModalEvents.MODAL_BTTN_CLICKED, modalBttnClicked);		}				private function removeEventListeners():void {			log("removeEventListeners");			_eventDispatcher.removeEventListener(ModalEvents.OPEN_EXTERNAL_URL, receiveEvent);			_eventDispatcher.removeEventListener(ModalEvents.OPEN_MAIL_DOC, receiveEvent);			_eventDispatcher.removeEventListener(ModalEvents.SHOW_LOG, receiveEvent);			_eventDispatcher.removeEventListener(ModalEvents.SHOW_LOADER, receiveEvent);			_eventDispatcher.removeEventListener(ModalEvents.HIDE_LOADER, receiveEvent);			_eventDispatcher.removeEventListener(ModalEvents.SHOW_MODAL, receiveEvent);			_eventDispatcher.removeEventListener(ModalEvents.CLOSE_MODAL, receiveEvent);			_eventDispatcher.removeEventListener(ModalEvents.CLOSE_ALL_MODALS, receiveEvent);			_eventDispatcher.removeEventListener(ModalEvents.CLOSE_MESSAGE_MODALS, receiveEvent);			_eventDispatcher.removeEventListener(ModalEvents.MODAL_BTTN_CLICKED, modalBttnClicked);		}				/*********************************************************************		 * EVENT HANDLING		 *********************************************************************/				private function receiveEvent(e:GenericDataEvent):void{			log("* receiveEvent type:"+e.type);			//			log(new Date());						switch(e.type){				case ModalEvents.SHOW_MODAL:					showModalById(e.data);					break;				case ModalEvents.CLOSE_MODAL:					closeTopModal();					break;				case ModalEvents.SHOW_LOADER:					showLoaderMC();					break;				case ModalEvents.HIDE_LOADER:					hideLoaderMC();					break;				case ModalEvents.CLOSE_ALL_MODALS:					closeAllModals();					break;				case ModalEvents.CLOSE_MESSAGE_MODALS:					closeModalByIndex(_MESSAGE_MODAL_INDEX);					break;				case ModalEvents.BACK_PREV_MODAL:					backToPrevModal(e.data.clearStack, 						(typeof(e.data.clearTop) === "boolean") ? e.data.clearTop : true					);					break;				case ModalEvents.SHOW_LOG:					showModalById({id:ModalsInfo.DEBUG_LOG_ID});										// MODAL TESTING					//					showModalById({id:ModalsInfo.SIGN_IN_ID});										break;				case ModalEvents.OPEN_EXTERNAL_URL:					openExternalUrl(e.data.link);					break;				case ModalEvents.OPEN_MAIL_DOC:					openMailDoc(e.data);					break;				case NavEvents.GO_HOME:					closeAllModals();					break;				default: // assumes a show modal event:					log("receiveEvent type not handled "+e.type);								}						log("receiveEvent done:"+e.type);		}				private function modalBttnClicked(e:GenericDataEvent):void { 			var bttnId:String = e.data.bttn_id;			var modalId:String = e.data.modal_id;			log( "*** modalBttnClicked bttnId='"+bttnId+"', modalId='"+modalId+"'");			switch (bttnId) {				case ModalsInfo.SIGN_OUT_BTTN_ID:					_eventDispatcher.dispatchEvent(new GenericDataEvent(AppEvents.LOGOUT_USER));					break;				case ModalsInfo.RESTORE_PURCHASES_BTTN_ID:					_eventDispatcher.dispatchEvent(new GenericDataEvent(SubscriptionEvents.RESTORE_TRANSACTIONS));					break;				case ModalsInfo.CONTACT_SALES_ID:					openMailDoc({email:"sales@speakaboos.com"});					break;				case ModalsInfo.CONTACT_BILLING_ID:					openMailDoc({email:"billing@speakaboos.com"});					break;				case ModalsInfo.CONTACT_SUPPORT_ID:					openMailDoc({email:"ipad.support@speakaboos.com"});					break;				case ModalsInfo.CONTACT_GENERAL_ID:					openMailDoc({email:"feedback@speakaboos.com"});					break;				case ModalsInfo.CONTACT_PRESS_ID:					openMailDoc({email:"press@speakaboos.com"});					break;				case ModalsInfo.CONTACT_PARTNERS_ID:					openMailDoc({email:"partners@speakaboos.com"});					break;				case ModalsInfo.CONTACT_JOBS_ID:					openMailDoc({email:"jobs@speakaboos.com"});					break;				//				case ModalsInfo.SHARE_GOOGLEPLUS_ID:				//					openExternalUrl("TBD");				//					break;				case ModalsInfo.SHARE_INSTAGRAM_ID:					openExternalUrl("http://instagram.com/speakaboos");					break;				case ModalsInfo.SHARE_FACEBOOK_ID:					//openExternalUrl("http://www.facebook.com/speakaboos");					openExternalUrl("fb://profile/47473197424");					//id:563605759					break;				case ModalsInfo.SHARE_SPEAKABOOS_ID:					openExternalUrl("http://www.speakaboos.com");					break;				case ModalsInfo.SHARE_PINTEREST_ID:					openExternalUrl("http://pinterest.com/speakaboos");					break;				case ModalsInfo.SHARE_YOUTUBE_ID:					openExternalUrl("http://www.youtube.com/speakaboos");					break;				case ModalsInfo.SHARE_TWITTER_ID:					openExternalUrl("https://twitter.com/speakaboos");					break;				case ModalsInfo.MORE_HELP_BTTN_ID:					openExternalUrl("http://help.speakaboos.com");					break;				case ModalsInfo.REPLAY_WELCOME_VIDEO_ID:					_eventDispatcher.dispatchEvent(new GenericDataEvent(AppEvents.PLAY_WELCOME_VIDEO));					break;				case ModalsInfo.SHARE_AND_FOLLOW_ID:				case ModalsInfo.DELETE_STORIES_ID:				case ModalsInfo.DELETE_STORY_ID:				case ModalsInfo.ABOUT_ID:				case ModalsInfo.HELP_FAQ_ID:				case ModalsInfo.CONTACT_ID:				case ModalsInfo.TERMS_ID:				case ModalsInfo.PRIVACY_ID:				case ModalsInfo.SUBSCRIBE_ID:				case ModalsInfo.RESUBSCRIBE_ID:				case ModalsInfo.COMPLETE_ACCOUNT_ID:				case ModalsInfo.MANAGE_ACCOUNT_ID:				case ModalsInfo.MANAGE_ACCOUNT_EMAIL_ID:				case ModalsInfo.MANAGE_ACCOUNT_SUB_EXPIRED_ID:				case ModalsInfo.MANAGE_STORIES_ID:				case ModalsInfo.COMPLETE_ACCOUNT_BTTN_ID:				case ModalsInfo.PASSWORD_RESET_ID:				case ModalsInfo.BAD_EMAIL_ID:				case ModalsInfo.BAD_SIGN_IN_ID:				case ModalsInfo.BAD_SIGN_UP_ID:				case ModalsInfo.MISSMATCHED_EMAIL_ID:				case ModalsInfo.USED_EMAIL_ID:				case ModalsInfo.SIGN_IN_ID:					showModalById({id: bttnId});					break;				case ModalsInfo.JOIN_BTTN_ID:					showModalById({id: ModalsInfo.SUBSCRIBE_ID});					break;								case ModalsInfo.FORGOT_PASSWORD_BTTN_ID:					showModalById({id: ModalsInfo.FORGOT_PASSWORD_ID});					break;				case ModalsInfo.ALREADY_SUBSCRIBED_BTTN_ID:					showModalById({id: ModalsInfo.SIGN_IN_ID});					break;				case ModalsInfo.DEBUG_BTTN_ID:					enterDebugger();					break;				case ModalsInfo.CLEAR_BTTN_ID:					clearLog();					break;				case ModalsInfo.HOME_BTTN_ID:					_eventDispatcher.dispatchEvent(new GenericDataEvent(AppEvents.FULL_RESET));					break;				case ModalsInfo.TEST_MODALS_BTTN_ID:					testModals();					break;				case ModalsInfo.OK_BTTN_ID:					switch (modalId) {						case ModalsInfo.SIGN_IN_ID:							signIn(e.data.modal);							break;						case ModalsInfo.COMPLETE_ACCOUNT_BTTN_ID:							//signUp(e.data.modal);							completeAccount(e.data.modal);							break;						case ModalsInfo.DELETE_STORIES_ID:							_eventDispatcher.dispatchEvent(new GenericDataEvent(ModalEvents.DELETE_ALL_STORIES_CLICKED));							break;						case ModalsInfo.DELETE_STORY_ID:							_eventDispatcher.dispatchEvent(new GenericDataEvent(ModalEvents.DELETE_STORY_CLICKED));							break;						case ModalsInfo.SUBSCRIPTION_EXPIRED_ID:							closeModalById(modalId);							showModalById({id: ModalsInfo.RESUBSCRIBE_ID});							break;						case ModalsInfo.TRIAL_OVER_BLOCKER_ID:							showModalById({id: ModalsInfo.SUBSCRIBE_ID});							break;						case ModalsInfo.FORGOT_PASSWORD_ID:							forgotPassword(e.data.modal);							break;						case ModalsInfo.FACEBOOK_FAILED_ID:							//TODO: FB logout						default:							closeModalById(modalId);					}					break;								case ModalsInfo.BACK_BTTN_ID:					backToPrevModal();					break;				case ModalsInfo.CLOSE_BTTN_ID:					closeModalById(modalId, true);					break;				case ModalsInfo.CANCEL_BTTN_ID:					switch (modalId) {						case ModalsInfo.TRIAL_OVER_BLOCKER_ID:							showModalById({id: ModalsInfo.SIGN_IN_ID});							break;						default:							closeModalById(modalId);							break;					}					break;				case ModalsInfo.ALL_SET_ID:				case ModalsInfo.GET_STARTED_BTTN_ID:				default:					closeModalById(modalId);					break;			}		}				/*********************************************************************		 * EXTERNAL LINK HANDLING		 *********************************************************************/				private function openExternalUrl(link:String = ""):void {			log("* openExternalUrl '"+link+"'");			if (link) {				var urlReq:URLRequest = new URLRequest(link);				navigateToURL(urlReq);			}		}				private function openMailDoc(paramsObj:Object):void {			var subject:String = paramsObj.subject;			if (!subject) subject = "";			else subject = "?subject="+subject;			var email:String = paramsObj.email;			if (!email) email = "support@speakaboos.com";			openExternalUrl("mailto:"+email+subject);		}				private function openMailDoc_goViral(paramsObj:Object):void { //TODO: get this working 			var subject:String = paramsObj.subject;						if (!subject) subject = "";			var email:String = paramsObj.email;			if (!email) email = "support@speakaboos.com";			var body:String = paramsObj.body;			if (!body) body = "";						//log("calling GoViral.goViral.showEmailComposer: '"+subject+"', '"+email+"', '"+body+"'");			if (GoViral.isSupported()) {				//log("goviral is supported, ver= "+GoViral.VERSION);				if (!GoViral.goViral) GoViral.create();				GoViral.goViral.showEmailComposer( subject, email, body, false);			}		}				/*********************************************************************		 * SPECIFIC MODAL GLUE		 *********************************************************************/				private function signIn(modal:ModalDialog):void {			var entryList:Array = modal.getData() as Array;						if(Validation.isPopulated(entryList[0]) && Validation.isPopulated(entryList[1])){				var userProfile:UserProfile = new UserProfile();				userProfile.email = entryList[0];				userProfile.password = entryList[1];				_appController.logIn(userProfile);				//TODO: Use an event rather than appController.logIn()				//_eventDispatcher.dispatchEvent(new GenericDataEvent(LoginEvents.LOGIN, {userProfile:userProfile}));			} else {				//showModalById({id:ModalsInfo.ERROR_EMAIL_FORMAT_ID});				showModalById({id:ModalsInfo.BAD_SIGN_IN_ID});							}		}				private function signUp(modal:ModalDialog):void {			//TODO: check email format and if pw is not empty before sending event			var entryList:Array = modal.getData() as Array;			var email0:String = TextUtil.trim(entryList[0]);			var email1:String = TextUtil.trim(entryList[1]);			if (email0 == email1) {				if (Validation.isValidEmailEx(email0)) {					var userProfile:UserProfile = new UserProfile();					userProfile.email = email0;					userProfile.password = entryList[2];					_eventDispatcher.dispatchEvent(new GenericDataEvent(LoginEvents.SIGNUP, {userProfile:userProfile}));				} else {					showModalById({id:ModalsInfo.ERROR_EMAIL_FORMAT_ID});				}			} else {				showModalById({id:ModalsInfo.MISSMATCHED_EMAIL_ID});			}		}				private function completeAccount(modal:ModalDialog):void {			//TODO: check email format and if pw is not empty before sending event			var entryList:Array = modal.getData() as Array;			var email0:String = TextUtil.trim(entryList[0]);			var email1:String = TextUtil.trim(entryList[1]);			var pw:String = TextUtil.trim(entryList[2]);			if (email0 == email1) {				if (Validation.isValidEmailEx(email0)) {					if(Validation.isValidPassword(pw)){						//var userProfile:UserProfile = new UserProfile();						//userProfile.email = email0;						//userProfile.password = entryList[2];						//_eventDispatcher.dispatchEvent(new GenericDataEvent(LoginEvents.SIGNUP, {userProfile:userProfile}));						_appController.completeAccount(email0, pw);					}					else{						showModalById({id:ModalsInfo.ERROR_PASSWORD_FORMAT_ID});					}				} else {					showModalById({id:ModalsInfo.ERROR_EMAIL_FORMAT_ID});				}			} else {				showModalById({id:ModalsInfo.MISSMATCHED_EMAIL_ID});			}		}				final private function forgotPassword(modal:ModalDialog):void{						var entryList:Array = modal.getData() as Array;						if(entryList && entryList.length){				var strEmail:String = entryList[0] as String;				if(Validation.isValidEmailEx(strEmail)){					showLoaderMC();					_eventDispatcher.dispatchEvent(new GenericDataEvent(LoginEvents.FORGOT_PASSWORD, {email:strEmail}));				}else{					showModalById({id:ModalsInfo.ERROR_EMAIL_FORMAT_ID});				}			}										}						/*********************************************************************		 * for reviewing the modals for copy/ layout		 *********************************************************************/				private function testModals():void {			//			stage.addEventListener(MouseEvent.MOUSE_DOWN,function(e:MouseEvent):void{log("mouse down "+e.target+", "+e.target.name)});			_eventDispatcher.removeEventListener(ModalEvents.MODAL_BTTN_CLICKED, modalBttnClicked);			_eventDispatcher.addEventListener(ModalEvents.MODAL_BTTN_CLICKED, nextTestModal);			_debugArray = [];			var data:Object = ModalsInfo.data;			for (var nm:String in data) {				if (nm !== ModalsInfo.LOADER_ID && nm !== ModalsInfo.DEBUG_LOG_ID) _debugArray.push(nm);			}			log("modal test");			log(_debugArray);			//			_mainModal = new ModalDialog(ModalsInfo.MAIN_MODAL_TYPE);			//			_messageModal = new ModalDialog(ModalsInfo.MESSAGE_MODAL_TYPE);			nextTestModal();		}		private function nextTestModal(e:GenericDataEvent = null):void {			closeAllModals();			if (_debugArray.length) {				var nm:String = _debugArray.shift();				showModalById({id:nm});			} else {				_eventDispatcher.removeEventListener(ModalEvents.MODAL_BTTN_CLICKED, nextTestModal);				_eventDispatcher.addEventListener(ModalEvents.MODAL_BTTN_CLICKED, modalBttnClicked);			}		}				/*********************************************************************		 * MODAL DISPLAY		 *********************************************************************/				public function showModalById(params:Object):void {			log("******************************************");			log ("*** showModalById: "+params.id+", "+params.clearStack);			log("******************************************");						_eventDispatcher.dispatchEvent(new GenericDataEvent(AppEvents.MODAL_OPEN));						var id:String = params.id;			if (params.closeOpen) closeAllModals();			var info:ModalData = ModalsInfo.getModalData(id);						var modalIndex:int = _curModalLookup.indexOf(info.type);			if (modalIndex >=0) {				var showBackBttn:Boolean = false;				log ("showing modal "+id+", "+_modalStack.length);				if (params.clearStack) _modalStack.length = 0;				showBackBttn = (modalIndex === _MAIN_MODAL_INDEX) && (_modalStack.length > 0);				if (modalIndex === _MAIN_MODAL_INDEX) { 					_modalStack.push(params); //params.track track all main modals? - maybe should be property of the modal data					closeModalByIndex(_MESSAGE_MODAL_INDEX); // if message modal is up when main shown, assume it should be closed				}				closeModalByIndex(modalIndex);				if (modalIndex === _MESSAGE_MODAL_INDEX) {					hideLoaderMC(); //if a message dialog is shown when loader is up, assume loader should be removed, maybe for other modals also...				}				var i:int;				var modal:ModalDialog = new ModalDialog(info.type);				modal.setDialogById(id, showBackBttn);				if (params.allowInteraction) {					modal.hideBlocker();				}				_containers[modalIndex].addChild(modal.mc);				_curModals[modalIndex] = modal;				if (modalIndex === _DEBUG_LOG_INDEX) {					(modal.customObject as TextFieldScroller).text = _logString;					(modal.customObject as TextFieldScroller).scrollToBottom();				}				setModalFocus();			} else {				throw new Error("bad modal type for id '"+id+"'");			}					}		private function backToPrevModal(clearStack:Boolean = false, clearTop:Boolean = true):void {			//log("* backToPrevModal clearStack, clearTop "+clearStack+", "+clearTop);			//log("* backToPrevModal "+_modalStack);			var prev:Object = null;			if (clearStack) _modalStack.length = 0;			if (clearTop) prev = popStack();			//			log("backToPrevModal top "+prev);			prev = popStack();			log("* backToPrevModal prev ",prev);			if (prev) {				showModalById(prev);			} else {				closeTopModal();			}		}				private function popStack():Object {			return _modalStack.length ? _modalStack.pop() : null;		}				private function closeModalById(modalId:String, clearStack:Boolean = false):void { 			log('* closeModalById; '+modalId);			var i:int = _curModals.length;			while (i--) {				if (_curModals[i] && (_curModals[i].id === modalId)) {					closeModalByIndex(i);					break;				}			}			if (clearStack) _modalStack.length = 0;		}				private function closeAllModals():void{			for (var i:int=0; i<_curModals.length; i++) {				closeModalByIndex(i);			}		}		private function closeModalByIndex(i:int):Boolean {			log('* closeModalByIndex; '+i);						var result:Boolean = false;			var modal:ModalDialog = _curModals[i];			if (modal) {				result = true;				log("destroying modal "+modal.id);				_containers[i].removeChild(modal.mc);				modal.destroy();				_curModals[i] = null;				if (i == _DEBUG_LOG_INDEX) clearLog(false); // if closing log window, clear the textfield				dispatchCloseModal();				setModalFocus();			}			return result;		}				private function dispatchCloseModal():void{ 			if (!modalOpen()) _eventDispatcher.dispatchEvent(new GenericDataEvent(AppEvents.MODAL_CLOSED_ALL));		}		private function closeTopModal():void{			log("* closeTopModal");						var i:int = _curModals.length;			while (i--) {				if (_curModals[i]) {					closeModalByIndex(i);					break;				}			}		}		private function setModalFocus():void{			var i:int = _curModals.length;			var hasFocus:Boolean = true;			while (i--) {				if (_curModals[i]) {					_curModals[i].hasFocus = hasFocus;					hasFocus = false;				}			}		}		private function showLoaderMC(allowIneraction:Boolean = true):void{			showModalById({id:ModalsInfo.LOADER_ID, closeOpen:false, allowIneraction:allowIneraction});		}		private function hideLoaderMC():void {			closeModalByIndex(_LOADER_INDEX);		}				public function modalOpen():Boolean {			var result:Boolean = false;			var i:int = _curModals.length;			while (i--) {				if (_curModals[i]) {					result = true;					break;				}			}			return result;		}				override public function destroy():void {			log("destroy");			removeEventListeners();			_modalStack = null;			var i:int;			for (i=0; i<_curModals.length; i++) {				if (_curModals[i]) _curModals[i].destroy();			}			_curModals = null;			_curModalLookup = null;			_containers = null;			_logString = null;			if (_mainModal) _mainModal.destroy();			if (_messageModal) _messageModal.destroy();			if (_modal) _modal.destroy();			_mainModal = null;			_messageModal = null;			_modal = null;			_debugArray = null;			super.destroy();		}				public static function logMessage(msg:String):void {			_logString += msg;		}		private function clearLog(clearString:Boolean = true):void {			if (clearString) _logString = "";			var modal:ModalDialog = _curModals[_DEBUG_LOG_INDEX];			if (modal) {				(modal.customObject as TextFieldScroller).text = _logString;			}		}	}}
package com.speakaboos.ipad.controller{	import com.speakaboos.ipad.controller.SubscriptionController;	import com.speakaboos.ipad.events.ModalEvents;	import com.speakaboos.ipad.events.CoreEventDispatcher;	import com.speakaboos.ipad.events.DBEvents;	import com.speakaboos.ipad.events.GenericDataEvent;	import com.speakaboos.ipad.events.LoginEvents;	import com.speakaboos.ipad.models.data.ModalsInfo;	import com.speakaboos.ipad.models.data.UserProfile;	import com.speakaboos.ipad.models.services.FacebookService;	import com.speakaboos.ipad.models.services.LoginService;	import com.speakaboos.ipad.view.CoreView;		import flash.events.Event;		public class LoginViewController extends CoreView	{		private var _appController:AppController;		private var _loginService:LoginService;		private var _facebookService:FacebookService;						public function LoginViewController(appController:AppController){			super.init();			_appController = appController;		}				override protected function onAddedToStage(e:Event):void{			super.onAddedToStage(e);						_loginService = LoginService.getInstance();			_facebookService = FacebookService.getInstance();						addEventListeners();			//showSignIn();		}				override protected function onRemovedFromStage(e:Event):void{			super.onRemovedFromStage(e);			removeEventListeners();		}										private function addEventListeners():void{			//LOGIN SERVICE EVENTS			//CoreEventDispatcher.getInstance().addEventListener(LoginEvents.LOGIN, receiveEvent);			CoreEventDispatcher.getInstance().addEventListener(LoginEvents.SIGNUP, receiveEvent);			//CoreEventDispatcher.getInstance().addEventListener(LoginEvents.LOGIN_ERROR, receiveEvent);			CoreEventDispatcher.getInstance().addEventListener(LoginEvents.SIGNUP_ERROR, receiveEvent);			CoreEventDispatcher.getInstance().addEventListener(LoginEvents.FB_LOGIN, receiveEvent);			CoreEventDispatcher.getInstance().addEventListener(LoginEvents.FB_LOGGED_IN, receiveEvent);			CoreEventDispatcher.getInstance().addEventListener(LoginEvents.FB_SIGNUP, receiveEvent);			CoreEventDispatcher.getInstance().addEventListener(LoginEvents.FB_LOGIN_FAILED, receiveEvent);						//CoreEventDispatcher.getInstance().addEventListener(LoginEvents.USER_LOGGED_IN, receiveEvent);			//CoreEventDispatcher.getInstance().addEventListener(LoginEvents.USER_SIGNED_UP, receiveEvent);			//CoreEventDispatcher.getInstance().addEventListener(LoginEvents.FORGOT_PASSWORD, receiveEvent);			//CoreEventDispatcher.getInstance().addEventListener(LoginEvents.FORGOT_PASSWORD_SENT, receiveEvent);			CoreEventDispatcher.getInstance().addEventListener(LoginEvents.CREATE_SUBSCRIPTION, receiveEvent);						//db			//CoreEventDispatcher.getInstance().addEventListener(DBEvents.USER_ADDED_TO_DB, receiveEvent);		}				private function removeEventListeners():void{			//LOGIN SERVICE EVENTS			//log("removing event listeners");			//CoreEventDispatcher.getInstance().removeEventListener(LoginEvents.LOGIN, receiveEvent);			CoreEventDispatcher.getInstance().removeEventListener(LoginEvents.SIGNUP, receiveEvent);			//CoreEventDispatcher.getInstance().removeEventListener(LoginEvents.LOGIN_ERROR, receiveEvent);			CoreEventDispatcher.getInstance().removeEventListener(LoginEvents.SIGNUP_ERROR, receiveEvent);			CoreEventDispatcher.getInstance().removeEventListener(LoginEvents.FB_LOGIN, receiveEvent);			CoreEventDispatcher.getInstance().removeEventListener(LoginEvents.FB_LOGGED_IN, receiveEvent);			CoreEventDispatcher.getInstance().removeEventListener(LoginEvents.FB_SIGNUP, receiveEvent);			CoreEventDispatcher.getInstance().removeEventListener(LoginEvents.FB_LOGIN_FAILED, receiveEvent);						//CoreEventDispatcher.getInstance().removeEventListener(LoginEvents.USER_LOGGED_IN, receiveEvent);			//CoreEventDispatcher.getInstance().removeEventListener(LoginEvents.USER_SIGNED_UP, receiveEvent);			//CoreEventDispatcher.getInstance().removeEventListener(LoginEvents.FORGOT_PASSWORD, receiveEvent);			//CoreEventDispatcher.getInstance().removeEventListener(LoginEvents.FORGOT_PASSWORD_SENT, receiveEvent);			CoreEventDispatcher.getInstance().removeEventListener(LoginEvents.CREATE_SUBSCRIPTION, receiveEvent);						//db			//CoreEventDispatcher.getInstance().removeEventListener(DBEvents.USER_ADDED_TO_DB, receiveEvent);					}				private function showSignIn():void{			//log("showSignIn _firstTimeUser:"+_appController.firstTimeUser);			CoreEventDispatcher.getInstance().dispatchEvent(new GenericDataEvent(ModalEvents.SHOW_MODAL, {id:ModalsInfo.SIGN_IN_ID}));		}				private function showSubscribe():void{			//log("showSubscribe");			_appController.showSubscribe();		}				private function doNotSubscribe():void{			//log("doNotSubscribe");			//CoreEventDispatcher.getInstance().dispatchEvent(new GenericDataEvent(AppEvents.USER_READY));			_appController.doNotSubscribe();		}				private function startFreeTrial():void{			//log("startFreeTrial");			_appController.startFreeTrial();					}						//private function doSubscriptionCheck(thisUser:UserProfile):void{					/*				check user's subscription state				generate appropriate dialog box			*/		/*				hideLoader();			_appController.doSubscriptionFlow();					}		*/				private function receiveEvent(e:*):void{			log("receiveEvent type:"+e.type);			log(e.data);						var userProfile:UserProfile;						switch(e.type){				//LOGIN SERVICE EVENTS				/*				case LoginEvents.LOGIN:					showLoader();					_loginService.login(e.data.userProfile);					break;				*/				/*				case LoginEvents.USER_LOGGED_IN:					log("USER_LOGGED_IN: _appController.firstTimeUser:"+AppController.firstTimeUser);										userProfile = e.data.userProfile as UserProfile;					setUserProfile(userProfile);										log("LoginViewController->receiveEvent->USER_LOGGED_IN: userProfile:");					log(userProfile);					log("adding user to db: fb_id" + userProfile.fb_id);					CoreEventDispatcher.getInstance().dispatchEvent(new GenericDataEvent(DBEvents.ADD_USER_TO_DB, {userProfile:userProfile}));					CoreEventDispatcher.getInstance().dispatchEvent(new GenericDataEvent(ModalEvents.CLOSE_ALL_MODALS));					break;				*/								case LoginEvents.SIGNUP:					showLoader();					_loginService.signup(e.data.userProfile);					break;											case LoginEvents.USER_SIGNED_UP:					/*					//log("USER_SIGNED_UP: _appController.firstTimeUser:"+_appController.firstTimeUser);					userProfile = e.data.userProfile;					setUserProfile(userProfile);					//_appController.userProfile = userProfile;					CoreEventDispatcher.getInstance().dispatchEvent(new GenericDataEvent(DBEvents.ADD_USER_TO_DB, {userProfile:userProfile}));					CoreEventDispatcher.getInstance().dispatchEvent(new GenericDataEvent(ModalEvents.CLOSE_ALL_MODALS));					*/										break;							case LoginEvents.FB_SIGNUP:				case LoginEvents.FB_LOGIN:					showLoader();					_facebookService.fbLogin();					break;								case LoginEvents.FB_LOGGED_IN:					//hideLoader();					userProfile = e.data.userProfile as UserProfile;					//_appController.userProfile = userProfile;					log("LoginViewController->receiveEvent->FB_LOGGED_IN: userProfile:");					log(userProfile);					setUserProfile(userProfile);					_loginService.loginFbUser(userProfile);					/*					if(_appController.firstTimeUser)						_loginService.signUpFBUser(userProfile);					else						_loginService.loginFbUser(userProfile);					*/					break;								case LoginEvents.FB_LOGIN_FAILED:					hideLoader();					CoreEventDispatcher.getInstance().dispatchEvent(new GenericDataEvent(ModalEvents.SHOW_MODAL, {id:ModalsInfo.FACEBOOK_FAILED_GEN_ID}));					break;								case LoginEvents.FB_SIGNED_UP:										//log("FB_SIGNED_UP");										/*					hideLoader();					log("FB_SIGNED_UP: _appController.firstTimeUser:"+_appController.firstTimeUser);					userProfile = e.data.userProfile;					CoreEventDispatcher.getInstance().dispatchEvent(new GenericDataEvent(DBEvents.ADD_USER_TO_DB, {userProfile:userProfile}));					break;				*/					hideLoader();										break;																/*				case DBEvents.USER_ADDED_TO_DB:					hideLoader();					doSubscriptionCheck(getUserProfile());										break;					*/				/*				case LoginEvents.FORGOT_PASSWORD:										showLoader();					_loginService.forgotPassword(e.data.email);														break;								case LoginEvents.FORGOT_PASSWORD_SENT:					hideLoader();					var modId:String;					var strResult:String = e.data.result;					if (strResult === "ok") {						modId = ModalsInfo.PASSWORD_RESET_ID;					} else {						modId = ModalsInfo.BAD_EMAIL_ID;					}					showSignIn();					CoreEventDispatcher.getInstance().dispatchEvent(new GenericDataEvent(ModalEvents.SHOW_MODAL, {id:modId}));					break;				*/				case LoginEvents.CREATE_SUBSCRIPTION:					//_storeKitService.createSubscription(e.data.userId, e.data.productId);					break;								//VIEW STATE EVENTS				/*				case LoginEvents.LOGIN_ERROR:					hideLoader();					CoreEventDispatcher.getInstance().dispatchEvent(new GenericDataEvent(ModalEvents.SHOW_MODAL, {id:ModalsInfo.BAD_SIGN_IN_ID}));					break;				*/								case LoginEvents.SIGNUP_ERROR:										hideLoader();										var errorCode:String = e.data.error.code;										switch(errorCode) 					{						case "501":							CoreEventDispatcher.getInstance().dispatchEvent(new GenericDataEvent(ModalEvents.SHOW_MODAL, {id:ModalsInfo.USED_EMAIL_ID}));							break;						default:							CoreEventDispatcher.getInstance().dispatchEvent(new GenericDataEvent(ModalEvents.SHOW_MODAL, {id:ModalsInfo.BAD_SIGN_UP_ID}));					}			}								}						/* convenience methods */		private function setUserProfile(u:UserProfile):void{			_appController.setUserProfile(u);		}				private function getUserProfile():UserProfile{			return _appController.getUserProfile();		}				override public function destroy():void{			log("destroy");			removeEventListeners();			_appController = null;			_loginService = null;			_facebookService = null;			super.destroy();		}	}}
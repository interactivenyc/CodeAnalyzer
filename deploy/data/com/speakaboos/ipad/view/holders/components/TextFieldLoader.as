package com.speakaboos.ipad.view.holders.components{	import com.speakaboos.ipad.controller.AppController;	import com.speakaboos.ipad.events.AppEvents;	import com.speakaboos.ipad.events.GenericDataEvent;	import com.speakaboos.ipad.events.ModalEvents;	import com.speakaboos.ipad.events.SpeakaboosServiceEvents;	import com.speakaboos.ipad.models.data.HolderChildParams;	import com.speakaboos.ipad.models.services.CacheDataService;	import com.speakaboos.ipad.models.services.SpeakaboosService;	import com.speakaboos.ipad.utils.HtmlTextUtil;	import com.speakaboos.ipad.view.CharacterWheel;	import com.speakaboos.ipad.view.holders.CoreMovieClipHolder;	import com.speakaboos.ipad.view.holders.components.TextFieldScroller;		import flash.display.MovieClip;	import flash.events.Event;	import flash.events.TextEvent;	import flash.text.StyleSheet;	import flash.text.TextField;		public class TextFieldLoader extends CoreMovieClipHolder	{		public var content:TextFieldScroller;				private var _loadSlug:String;		private var _loadEvent:String;				private var _textLoaded:Boolean = false;				private var _initPending:Boolean = false;//		private var textScroller:TextFieldScroller;		public function TextFieldLoader(_view:MovieClip)		{			super(_view);			setupChildren(Vector.<HolderChildParams>([				new HolderChildParams("content", TextFieldScroller)			]));		}				override public function setInfo(info:Object):void { //pMc:MovieClip, controller:AppController, loadSlug:String, loadEvent:String, title:String)			_loadSlug = info.loadSlug;			_loadEvent = CacheDataService.GENERIC_DATA_METHOD + _loadSlug; 		}						private function initScrollBar():void {			content.addEventListener(TextEvent.LINK, onHyperLinkEvent,false,0,true);//			removeChild(content);//			textScroller = new TextFieldScroller(content);//			addChild(textScroller);//			content.text = "Loading...";		}				private  function onHyperLinkEvent(event:TextEvent):void		{//			log("onHyperLinkEvent "+event.text);			var eventParams:Array = event.text.split("|");			switch (eventParams[0]) {				case "email":					_eventDispatcher.dispatchEvent(new GenericDataEvent(ModalEvents.OPEN_MAIL_DOC, {email:eventParams[1]}));					break;				case "url":					_eventDispatcher.dispatchEvent(new GenericDataEvent(ModalEvents.OPEN_EXTERNAL_URL, {link:eventParams[1]}));					break;				default:					break;			}		}				public function onCssloaded(e:GenericDataEvent):void {			if (e.type == SpeakaboosServiceEvents.CSS_STYLESHEET_LOADED){				_eventDispatcher.removeEventListener(SpeakaboosServiceEvents.CSS_STYLESHEET_LOADED, onCssloaded);				var ss:StyleSheet = new StyleSheet();				ss.parseCSS(e.data.content);				HtmlTextUtil.loadedCss = ss;				if (_initPending) init();				_initPending = false;			}		}						override public function onAddedToStage(e:Event = null):void{			_eventDispatcher.addEventListener(AppEvents.NETWORK_STATUS, onNetworkStatusUpdate);			super.onAddedToStage(e);			init();		}				override public function onRemovedFromStage(e:Event = null):void{			_eventDispatcher.removeEventListener(AppEvents.NETWORK_STATUS, onNetworkStatusUpdate);			_textLoaded = false;			super.onRemovedFromStage(e);		}				protected function onNetworkStatusUpdate(e:GenericDataEvent):void {			if (e.data.isOnline) init();		}				private function init():void{			log("init ",_textLoaded, HtmlTextUtil.loadedCss);			if (HtmlTextUtil.loadedCss) {				if (!_textLoaded) {					_eventDispatcher.addEventListener(_loadEvent, onTextloaded);					SpeakaboosService.getInstance().getGenericData(_loadSlug);				}			} else {				_initPending = true;				_eventDispatcher.addEventListener(SpeakaboosServiceEvents.CSS_STYLESHEET_LOADED, onCssloaded);				SpeakaboosService.getInstance().getGenericData(CacheDataService.CSS_STYLESHEET_SLUG);			}		}				public function onTextloaded(e:GenericDataEvent):void {			if (e.type === _loadEvent){//				log("text loaded length:"+e.data.content.length);				_eventDispatcher.removeEventListener(_loadEvent, onTextloaded);				_textLoaded = true;				initScrollBar();				HtmlTextUtil.setFieldText(content.textField, e.data.content, HtmlTextUtil.LOADED);				content.redrawScrollBar();			}		}		override public function destroy():void {//			_textLoaded = false;			_eventDispatcher.removeEventListener(AppEvents.NETWORK_STATUS, onNetworkStatusUpdate);			super.destroy();		}	}}
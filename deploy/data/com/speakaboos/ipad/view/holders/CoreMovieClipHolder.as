package com.speakaboos.ipad.view.holders {		import com.speakaboos.ipad.models.data.HolderChildInfo;		import flash.display.DisplayObject;	import flash.display.MovieClip;
	/**	 * This extends the CoreDisplayObjectHolder to add some movieClip specific	 *  capabilities.	 * 	 * @author Hudson	 */	public class CoreMovieClipHolder extends CoreDisplayObjectHolder {		public var mc:MovieClip;				public function CoreMovieClipHolder(_view:MovieClip) {			mc = _view;			super(mc);		}				public function get numChildren():int {			return mc ? mc.numChildren : 0;		}		public function removeChildren():void { //TODO: loop through to null out parentHolder props			if (mc) mc.removeChildren();		}		public function removeChild(child:*):DisplayObject {			if (!mc) return null;			var childMC:DisplayObject;			if (child is CoreMovieClipHolder) {				childMC = child.mc;			} else {				childMC = child;			}			if (mc.contains(childMC)) {				clearChildInfoLookup(childMC.name);				return mc.removeChild(childMC);			} else {				return null;			}		}		public function addChild(child:*):DisplayObject {			if (!mc) return null;			var childMC:DisplayObject;			var holderChildInfo:HolderChildInfo;			if (child is CoreMovieClipHolder) {				childMC = child.mc;				holderChildInfo = new HolderChildInfo(child, null, null, childMC);			} else {				holderChildInfo = new HolderChildInfo(null, null, null, child);				childMC = child;			}			setChildInfoLookup(childMC.name, holderChildInfo);			return mc.addChild(childMC);		}		public function removeChildAt(index:int):DisplayObject {			if (!mc || (mc.numChildren <= index)) return null;			return mc.removeChildAt(index);		}		public function addChildAt(child:*, index:int):DisplayObject {			if (!mc) return null;			if (child is CoreMovieClipHolder) child = child.mc;			return mc.addChildAt(child as DisplayObject, index);		}		public function contains(child:*):Boolean {			if (!mc) return false;			if (child is CoreMovieClipHolder) child = child.mc;			return mc.contains(child as DisplayObject);		}		public function getChildByName(name:String):DisplayObject {			return mc.getChildByName(name);		}		public function getChildAt(i:int):DisplayObject {			return mc.getChildAt(i);		}		override public function destroy():void {			super.destroy();			mc = null;		}	}}
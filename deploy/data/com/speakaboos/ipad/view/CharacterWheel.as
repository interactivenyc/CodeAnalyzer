package com.speakaboos.ipad.view{	import com.greensock.TweenLite;	import com.greensock.easing.Strong;	import com.speakaboos.ipad.controller.AppController;	import com.speakaboos.ipad.events.AppEvents;	import com.speakaboos.ipad.events.GenericDataEvent;	import com.speakaboos.ipad.events.SpeakaboosServiceEvents;	import com.speakaboos.ipad.models.data.Character;	import com.speakaboos.ipad.models.data.HolderChildParams;	import com.speakaboos.ipad.models.services.SpeakaboosService;	import com.speakaboos.ipad.utils.MovieClipUtils;	import com.speakaboos.ipad.utils.ObjectUtils;	import com.speakaboos.ipad.view.components.CacheLoader;	import com.speakaboos.ipad.view.holders.CoreMovieClipHolder;	import com.speakaboos.ipad.view.holders.components.MCAlphaButton;	import com.speakaboos.story.utils.AudioPlayer;		import flash.display.LoaderInfo;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.SecurityErrorEvent;
		public class CharacterWheel extends CoreMovieClipHolder	{		public static const CHAR_CLICKED:String = "CHAR_CLICKED";		public static const CHAR_SLOT_COUNT:int = 5;		public var btn_fwd:MCAlphaButton;		public var btn_back:MCAlphaButton;				public var dial:MovieClip;		public var bg:MovieClip;				public var characterWindows:CharacterWindows;				private var _delayTime:Number = 0;		private var characterWindowsX:Number;		private var characterWindowsY:Number;				//private var _activecharacterSWFs:Array = [];		private var _characters:Vector.<Character>;		private var _charsAnimating:int = 0;				private var _cacheLoader:CacheLoader;		private var _charLoadingIndex:int;		private var _allCharLoaded:Boolean;				public function CharacterWheel(pMc:MovieClip){			super(pMc);			setupChildren(Vector.<HolderChildParams>([				new HolderChildParams("btn_fwd", MCAlphaButton, rotateForwardClicked),				new HolderChildParams("btn_back", MCAlphaButton, rotateBackClicked),				new HolderChildParams("dial"),				new HolderChildParams("characterWindows", CharacterWindows), 				new HolderChildParams("bg")			]));			init();			//log("constructor");		}				private function init():void {						_cacheLoader = new CacheLoader();						_characters = Vector.<Character>(SpeakaboosService.getInstance().characters);						_charLoadingIndex = _characters.length;			_allCharLoaded = false;			loadNextChar();		}				override public function onAddedToStage(e:Event = null):void{			super.onAddedToStage(e);			addEventListeners();			characterWindowsX = characterWindows.x;			characterWindowsY = characterWindows.y;			characterWindows.visible = false;		}				private function addEventListeners():void {			_eventDispatcher.addEventListener(CHAR_CLICKED, onCharClicked);						_cacheLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, onCharacterLoaded,false,0,true);			_cacheLoader.addEventListener(IOErrorEvent.IO_ERROR, onIOError,false,0,true);			_cacheLoader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, onIOError,false,0,true);			_cacheLoader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityError,false,0,true);		}				private function removeEventListeners():void {			_eventDispatcher.removeEventListener(CHAR_CLICKED, onCharClicked);						_cacheLoader.contentLoaderInfo.removeEventListener(Event.COMPLETE, onCharacterLoaded);			_cacheLoader.removeEventListener(IOErrorEvent.IO_ERROR, onIOError);			_cacheLoader.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, onIOError);			_cacheLoader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityError);		}				override public function onRemovedFromStage(e:Event = null):void{			super.onRemovedFromStage(e);			removeEventListeners();		}				private function loadNextChar():void		{			if (_charLoadingIndex > 0) {				_charLoadingIndex--;				_cacheLoader.loadUrl(_characters[_charLoadingIndex].home_screen_wheel_icon);			} else {				allCharactersLoaded();			}		}						private function onCharacterLoaded(e:Event):void{			//log("onCharacterLoaded");			var container:MovieClip = new MovieClip();			var loaderInfo:LoaderInfo = (e.target as LoaderInfo);			var swf:MovieClip = MovieClip(loaderInfo.content);			container.addChild(swf);			var char:CharacterSWF;			char = new CharacterSWF(container, _characters[_charLoadingIndex]);			_characters[_charLoadingIndex].charSWF = char;						char.x = characterWindowsX-55;			char.y = characterWindowsY-45;			loadNextChar();		}								private function allCharactersLoaded():void{			//log("allCharactersLoaded");			for (var i:int = 0; i < _characters.length; i++){				addChild(_characters[i].charSWF);			}			_allCharLoaded = true;			rotateChars(1);		}				public function onSwipe(direction:int):void{			rotateChars(direction);		}				private function rotateChars(direction:int):void{			if (AppController.animating == true) return;			//log("rotateChars: "+direction);						AppController.animating = true;			_charsAnimating = CHAR_SLOT_COUNT;						if (direction == -1){				_characters.push(_characters.shift());			}else{				_characters.unshift(_characters.pop());			}						for (var i:int = 0; i < _characters.length; i++){				if (i<CHAR_SLOT_COUNT){					_characters[i].charSWF.setPosition(i+1, animFinished);				}else{					_characters[i].charSWF.setPosition(-1);				}			}						TweenLite.to(dial, 1, {rotation:dial.rotation+(45*direction), ease:Strong.easeOut});			if (AppController.categoryPageInitialized == true){ //don't play initial audio onload				AudioPlayer.getInstance().playInternalSound("GenericButtonPress");				AudioPlayer.getInstance().playInternalSound("CharacterWheelTurnSound");			}					}				private function rotateForwardClicked():void {			rotateChars(-1);		}		private function rotateBackClicked():void {			rotateChars(1);		}		public function onCharClicked(e:GenericDataEvent):void {			loadStoriesByCharacter(e.data.char);		}				private function loadStoriesByCharacter(character:Character):void{			if (character == null) return;						AudioPlayer.getInstance().stopAllSounds();			AudioPlayer.getInstance().playInternalSound("GenericButtonPress");			CacheLoader.playAudioFromCachedUrl(character.category_title_audio);						SpeakaboosService.getInstance().setCategoryBySlug(character.slug);			_eventDispatcher.dispatchEvent(new GenericDataEvent(SpeakaboosServiceEvents.STORIES_LOADED));		}				protected function onIOError(e:IOErrorEvent):void{			log("onIOError: " + e.text);			//increment this anyway, so load will complete			loadNextChar();		}				protected function onSecurityError(event:SecurityError):void{			log("onSecurityError");		}				private function animFinished(e:Event = null):void {			_charsAnimating --;			//log("animFinished "+_charsAnimating);			if (_charsAnimating == 0){				AppController.animating = false;			}		}				override public function destroy():void {			//TODO: flesh this out			log("destroy");			removeEventListeners();			_allCharLoaded = false;			super.destroy();		}	}}
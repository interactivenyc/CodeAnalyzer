package com.speakaboos.ipad.view{	import com.speakaboos.ipad.controller.AppController;	import com.speakaboos.ipad.events.AppEvents;	import com.speakaboos.ipad.events.CoreEventDispatcher;	import com.speakaboos.ipad.events.GenericDataEvent;	import com.speakaboos.ipad.models.data.Category;	import com.speakaboos.ipad.models.services.SpeakaboosService;	import com.speakaboos.ipad.utils.BitmapUtils;	import com.speakaboos.ipad.utils.ColorUtil;	import com.speakaboos.ipad.utils.MovieClipUtils;	import com.speakaboos.ipad.view.components.CoreMovieClip;		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.events.Event;		public class PageFlip extends CoreMovieClip	{		public var pageLeft:MovieClip;		public var pageRight:MovieClip;		public var nextLeft:MovieClip;		public var nextRight:MovieClip;		private var _newCategory:Category;				//private var _nextPage:int;		private var _numIcons:int;		public function set numIcons(numIcons:int):void{_numIcons=numIcons};		private var _direction:int;		public function set direction(direction:int):void{_direction=direction};				private var _pageLayoutLeftBitmap:Bitmap;		private var _pageLayoutRightBitmap:Bitmap;		private var _characterWheelMC:MovieClip;				public function PageFlip(){			super.init();		}				override protected function onAddedToStage(e:Event):void{			super.onAddedToStage(e);						var service:SpeakaboosService = SpeakaboosService.getInstance();			_newCategory = service.category;			setupFlipPages();						addEventListener(AppEvents.ANIM_FINISHED, onAnimFinished);			addEventListener(AppEvents.PAGE_FLIP_HALFWAY, onPageFlipHalfway);						AppController.animating = true;		}				override protected function onRemovedFromStage(e:Event):void{			super.onRemovedFromStage(e);						removeEventListener(AppEvents.ANIM_FINISHED, onAnimFinished);						AppController.animating = false;		}								private function setupFlipPages():void{			log("*** setupFlipPages");						_pageLayoutRightBitmap = BookView.getInstance().pageLayoutRightBitmap;			_pageLayoutLeftBitmap = BookView.getInstance().pageLayoutLeftBitmap;						log("_pageLayoutRightBitmap checkForNull: "+_pageLayoutRightBitmap);						_pageLayoutRightBitmap.x = 600;						pageLeft.container.removeChildren();			pageRight.container.removeChildren();			nextLeft.container.removeChildren();			nextRight.container.removeChildren();						_characterWheelMC = BookView.getInstance().characterWheel.mc;						prepareExistingPages();			prepareNextPages();						log("** AppController.viewMode: "+AppController.viewMode);			log("** AppController.newSection: "+AppController.newSection);			log("** AppController.categoryBack: "+AppController.categoryBack);						if (AppController.viewMode == AppController.MODE_CATEGORIES){				if(AppController.newSection == false && AppController.categoryBack == true){					nextLeft.container.addChild(getCharWheelBitmap());				}else if (AppController.newSection == false){					nextLeft.container.addChild(getCharWheelBitmap());					pageLeft.container.addChild(getCharWheelBitmap());				}			}else if (AppController.viewMode == AppController.MODE_STORIES){				if(AppController.newSection == true && AppController.categoryBack == false){					pageLeft.container.addChild(getCharWheelBitmap());				}else if (AppController.newSection == true){					nextLeft.container.addChild(getCharWheelBitmap());					pageLeft.container.addChild(getCharWheelBitmap());				}			}					}						private function prepareExistingPages():void{			log("*** prepareExistingPages");						if (AppController.viewMode == AppController.MODE_CATEGORIES){				prepareCategoryFirst();							}else if (AppController.viewMode == AppController.MODE_STORIES){				prepareStoryFirst();			}		}				private function prepareNextPages():void{			log("*** prepareNextPages");						if (AppController.viewMode == AppController.MODE_CATEGORIES){				prepareCategoryNext();			}else if (AppController.viewMode == AppController.MODE_STORIES){				prepareStoryNext();			}		}								private function prepareCategoryFirst():void{			var rightMC:MovieClip;			var leftMC:MovieClip;			leftMC = new MovieClip();			rightMC = new MovieClip();						var bookView:BookView = BookView.getInstance();						if(AppController.newSection == true || AppController.categoryBack == true){				leftMC.addChild(bookView.pageLeft.container.getChildAt(0));				rightMC.addChild(bookView.pageRight.container.getChildAt(0));			}else{								leftMC.addChild(MovieClipUtils.getLibraryMC("left_category").container.getChildAt(0));				rightMC.addChild(MovieClipUtils.getLibraryMC("right_category").container.getChildAt(0));			}						pageLeft.container.addChild(leftMC);			pageLeft.addChild(_pageLayoutLeftBitmap);						pageRight.container.addChild(rightMC);			pageRight.addChild(_pageLayoutRightBitmap);		}						private function prepareCategoryNext():void{			var rightMC:MovieClip;			var leftMC:MovieClip;			leftMC = new MovieClip();			rightMC = new MovieClip();						if(AppController.categoryBack == true){				leftMC.addChild(MovieClipUtils.getLibraryMC("left_category").container.getChildAt(0));				rightMC.addChild( MovieClipUtils.getLibraryMC("right_category").container.getChildAt(0));			}else{				try{					leftMC.addChild(BookView.getInstance().pageLeft.container.getChildAt(0));					rightMC.addChild(BookView.getInstance().pageRight.container.getChildAt(0));				}catch(e:Error){					log("*** ERROR BookView.getInstance().pageLeft.container.getChildAt(0)");					leftMC.addChild(MovieClipUtils.getLibraryMC("left_category").container.getChildAt(0));					rightMC.addChild( MovieClipUtils.getLibraryMC("right_category").container.getChildAt(0));				}			}			nextLeft.container.addChild(leftMC);			nextRight.container.addChild(rightMC);		}								private function prepareStoryFirst():void{			var rightMC:DisplayObject;			var leftMC:DisplayObject;						if(AppController.newSection == true){				leftMC = MovieClipUtils.getLibraryMC("left_category").container.getChildAt(0);				rightMC = MovieClipUtils.getLibraryMC("right_category").container.getChildAt(0);			}else{				leftMC = BookView.getInstance().pageLeft.container.getChildAt(0);				rightMC = BookView.getInstance().pageRight.container.getChildAt(0);							}						pageLeft.container.addChild(leftMC);			pageLeft.addChild(_pageLayoutLeftBitmap);						pageRight.container.addChild(rightMC);			pageRight.addChild(_pageLayoutRightBitmap);					}								private function prepareStoryNext():void{			var rightMC:MovieClip;			var leftMC:MovieClip;						rightMC = new MovieClip();			rightMC.addChild(MovieClipUtils.getLibraryMC("path_"+_numIcons+"_right"));						leftMC = new MovieClip();			leftMC.addChild(MovieClipUtils.getLibraryMC("path_"+_numIcons+"_left"));						colorizePageItem(rightMC);			colorizePageItem(leftMC);						nextLeft.container.addChild(leftMC);			nextRight.container.addChild(rightMC);								}				private function getCharWheelBitmap():Bitmap{			_characterWheelMC.scaleX = _characterWheelMC.scaleY = 1;			var charWheelBitmapData:BitmapData = MovieClipUtils.getBitmapDataFromMC(_characterWheelMC);			_characterWheelMC.scaleX = _characterWheelMC.scaleY = .9;						var characterWheelBitmap:Bitmap = new Bitmap(charWheelBitmapData);			characterWheelBitmap.scaleX = characterWheelBitmap.scaleY = .9;			characterWheelBitmap.smoothing = true;			characterWheelBitmap.x = 25;			characterWheelBitmap.y = 402;						return characterWheelBitmap;		}						private function onPageFlipHalfway(e:Event):void{						log("*** Event: ANIM_FINISHED (Page Flip Halfway");			CoreEventDispatcher.getInstance().dispatchEvent(new GenericDataEvent(AppEvents.ANIM_FINISHED));						_pageLayoutLeftBitmap.parent.removeChild(_pageLayoutLeftBitmap);			_pageLayoutRightBitmap.parent.removeChild(_pageLayoutRightBitmap);		}						private function onAnimFinished(e:Event):void{						log("*** Event: ANIM_FINISHED (Page Flip Complete)");			CoreEventDispatcher.getInstance().dispatchEvent(new GenericDataEvent(AppEvents.ANIM_FINISHED));		}						private function colorizePageItem(pageItem:MovieClip):void{			log("*** colorizePageItem");						var colorString:String;			var bitmapData:BitmapData = MovieClipUtils.getBitmapDataFromMC(pageItem);			var bitmap:Bitmap = new Bitmap(bitmapData);						if (AppController.viewMode == AppController.MODE_STORIES && _newCategory != null){								if (_newCategory.category_screen_page_color.indexOf("AdjustColor") > -1) {					colorString = _newCategory.category_screen_page_color;					//log("colorizePageItem colorString: "+colorString);					ColorUtil.colorize( bitmap, colorString);				}				pageItem.addChild(bitmap);			}		}				override public function destroy():void {			//TODO: flesh this out			log("destroy");			super.destroy();		}	}}
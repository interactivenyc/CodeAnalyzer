package com.inyc.utils{	import com.inyc.core.SystemUtils;	import com.inyc.utils.error.FileErrorStruct;		import flash.errors.IOError;	import flash.filesystem.File;
			public class FileUtil	{				private static const CACHE_SUB_DIR:String = "/Library/Caches";		private static var libDir:File;		private static var CACHE_DIR:File;		private static var STORIES_DIR:File;		private static var appBundleDir:File;				public function FileUtil()		{		}				public static function deleteDirectoryPath(path:String):Boolean{			var directory:File = new File(path);//getDocumentsDir().resolvePath(path); 			return deleteDirectory(directory);		}						public static function deleteDirectory(directory:File):Boolean{					trace("Directory path to be deleted: " + directory.url)						if(!directory.exists){				trace("directory " + directory.url + " does not exist!");				return true;			}									try{				directory.deleteDirectory(true); 			}			catch(error:IOError){				trace("IOError");				return false;			}			catch(error:SecurityError){				trace("SecurityError")				return false;			}						return true;				}				public static function getLibraryDir(subDir:String = ""):File {			if (!libDir) {				libDir = new File(File.applicationDirectory.nativePath + CACHE_SUB_DIR + subDir);				if(!libDir.exists){					trace("getLibraryDir directory " + libDir.url + " does not exist!");				}			}			return libDir;		}				public static function getAppBundleSubPath(subDir:String = ""):File{			//returns a subdirectory in the application bundle			var thisDir:File = new File(getAppBundleDir().nativePath + subDir);			return thisDir;				}				private static function getAppBundleDir():File{			//return the application bundle root directory			if(appBundleDir){				return appBundleDir;			}					appBundleDir = new File(File.applicationDirectory.nativePath);						return appBundleDir		}				private static function getCacheFileObject(subDir:String = ""):File {			var str:String;			if (SystemUtils.isAppleIOS()) {				str = File.applicationDirectory.nativePath + "/\.\./" + CACHE_SUB_DIR + subDir;			} else {				str = File.applicationStorageDirectory.nativePath + CACHE_SUB_DIR + subDir;			}			return new File(str);		}				public static function cacheDirExists(create:Boolean=true, subDir:String = ""):Boolean {			var result:Boolean;			var cacheDir:File = getCacheFileObject(subDir);			result = cacheDir.exists;			if (!result && create) cacheDir.createDirectory();			return result;		}				public static function getCacheDir(create:Boolean=true, subDir:String = ""):File {			//			if(CACHE_DIR)//				return CACHE_DIR;			var cacheDir:File = getCacheFileObject(subDir);			if (!cacheDir.exists && create) cacheDir.createDirectory();			CACHE_DIR = cacheDir;			return CACHE_DIR; 	   }						public static function getStoriesDir(create:Boolean=true):File{			if(STORIES_DIR)				return STORIES_DIR;						var cacheDir:String = getCacheDir().nativePath;			var s:File = new File(cacheDir + "/stories");			if(!s.exists && create){s.createDirectory()};						STORIES_DIR = s;						return STORIES_DIR;					}				public static function deleteStoriesDir():Boolean{			var sd:File = getStoriesDir(false);			if(!sd.exists)				return true;						return deleteDirectory(sd);			}						public static function getSlugDir(slug:String, create:Boolean=true):File{			var slugDir:File = new File(getStoriesDir().nativePath + "/" + slug);			if(!slugDir.exists && create){slugDir.createDirectory();}			return slugDir;		}								public static function deleteSlugDir(slug:String):Boolean{			var sd:File = getSlugDir(slug, false);			var success:Boolean = false;			//trace('deleting directory: ' + sd.nativePath);			if(sd.exists)				success = deleteDirectory(sd);						return success;					}						public static function getDocumentsDir():File {						//Note: path is a string depicting subdirectory in the Documents directory			var docsDir:File = new File(File.documentsDirectory.nativePath);			try{								if (!docsDir.exists) 					docsDir.createDirectory();			}			catch(error:IOError){				trace("IOError");				return null;			}			catch(error:SecurityError){				trace("SecurityError");				return null;			}						return docsDir;				}						public static function deleteDirectories(arrDirs:Array):FileErrorStruct{			var len:uint = arrDirs.length;			var errVector:Vector.<String> = Vector.<String>([]);			var success:Boolean = false;						for(var i:int=0;i<len;i++){				var thisSuccess:Boolean = FileUtil.deleteDirectory(arrDirs[i]);				if(!thisSuccess){					errVector.push(arrDirs[i]);				}			}						success = (errVector.length == 0);			var eStruct:FileErrorStruct =  new FileErrorStruct(success);			eStruct.errorList = errVector;						return eStruct;					}						//		public static function setDoNotBackupFlag(filePath:String):Boolean{//			var mb:MobileBackupImpl = MobileBackupImpl.getInstance();//			var b:Boolean = mb.setBackUpFlag(filePath);//			mb.destroy();//			return b;//		}			}}

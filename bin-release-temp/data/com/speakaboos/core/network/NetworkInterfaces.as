package com.speakaboos.core.network{	import com.speakaboos.core.network.SpeakNetworkInterface;	import com.speakaboos.core.network.iNetworkInterface;			public class NetworkInterfaces implements iNetworkInterface	{				//import flash.net.NetworkInfo;				/*		CONFIG::FLASH_AUTHORING{			import flash.net.NetworkInterface;			import flash.net.InterfaceAddress;			}		*/		//SPK::RELEASE{			import com.adobe.nativeExtensions.Networkinfo.*;		//}		import flash.utils.getDefinitionByName;							public function NetworkInterfaces() 		{						//var vNetworkInterfaces:Vector.<NetworkInterface>; 			var vNetworkInterfaces:Vector.<Object>; 						/*			if(!flash.net.NetworkInfo.isSupported){				trace("access to network interface information is NOT supported on this system.");				return;			}			*/						/* if (flash.net.NetworkInfo.isSupported) { 				trace("Using flash.net.NetworkInfo for interface information");				vNetworkInterfaces = getDefinitionByName('flash.net.NetworkInfo')['networkInfo']['findInterfaces'](); 			} 			else { 			*/				trace("Using iOS ANE for NetworkInfo");				//vNetworkInterfaces = getDefinitionByName('com.adobe.nativeExtensions.Networkinfo.NetworkInfo')['networkInfo']['findInterfaces'](); 				vNetworkInterfaces = NetworkInfo.networkInfo.findInterfaces() as Vector.<Object>;				/*								TypeError: Error #1034: Type Coercion failed: cannot convert __AS3__.vec::Vector.<com.adobe.nativeExtensions.Networkinfo::NetworkInterface>@99e9129 to .				at com.speakaboos.core.network::NetworkInterfaces()[/Users/thierry/Documents/development/workspace/iPadApp/src/com/speakaboos/core/network/NetworkInterfaces.as:30]								*/			//} 									for each (var ni:Object in vNetworkInterfaces) 			{								// Access interfaceObj.name, interfaceObj.displayName, interfaceObj.active,				// interfaceObj.hardwareAddress, and interfaceObj.mtu				var name:String = ni.name;				var dName:String = ni.displayName;				var active:Boolean = ni.active;				var hwAddy:String = ni.hardwareAddress;				var mtu:int = ni.mtu;								trace("************************");				trace("Interface: " + dName);				trace("Name: " + name);				trace("Active: " + active);				trace("Hardare Address: " + hwAddy);				trace("MTU: "  + mtu);								trace("*********** Interface Addresses in " + dName +"*************");								for each(var address:Object in ni.addresses)				{					trace("////////////////////");										// Access address.address, address.broadcast, address.ipVersion, and address.prefixLength					var addr:String = address.address;					var bCast:String = address.broadcast;					var ipVer:String = address.ipVersion;					var prefixLen:int = address.prefixLength;															trace("Address: " + addr);					trace("Broadcast: " + bCast);					trace("ip Version: " + ipVer);					trace("Prefix Length: " + prefixLen);										//trace("////////////////////");				}								trace("************************");							}					}						public function getAllInterfaces():Vector.<SpeakNetworkInterface>{						var vAll:Vector.<SpeakNetworkInterface> = NetworkInfo.networkInfo.findInterfaces() as Vector.<SpeakNetworkInterface>;						return vAll;								}				public function getActiveInterface():String{					return "hello";				}	}}
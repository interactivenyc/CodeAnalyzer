package com.speakaboos.mobile.data.db.connection{	import com.speakaboos.ipad.utils.FileUtil;		import flash.data.SQLConnection;	import flash.data.SQLMode;	import flash.errors.IllegalOperationError;	import flash.errors.SQLError;	import flash.events.SQLEvent;	import flash.filesystem.File;	import flash.net.Responder;		public class ConnectionFactory	{		private static var _instance:ConnectionFactory;		private static const DB_NAME:String = "spkDb.sqlite";//"appDB.db";		private static var _currConnections:uint = 0;				public function ConnectionFactory(enforcer:SingletonEnforcer){}						public static function getInstance():ConnectionFactory {			if( _instance == null ) {				_instance = new ConnectionFactory( new SingletonEnforcer() );			}			return _instance;		}						public static function isActivated():Boolean{			return (_instance != null);		}						final public function getConnection(cbFunc:Function, mode:String=SQLMode.READ):void{						//Logger.log("getConnection");						/*				NOTE: creates asynchronous db connections ONLY			*/						/*				open a db connection				mode: any of the SQLMode values				cbFunc: the callback function to be called on successful open			*/						var conn:SQLConnection;						try{				//Logger.log("trying new SQL Connection");				conn = new SQLConnection();				}			catch(e:SecurityError){				//Logger.log("Security error creating DB Connection");				cbFunc(null);				return;			}			catch(e:Error){				//Logger.log("Default error creating DB Connection");				cbFunc(null);				return;			}						//Logger.log("got SQL Connection: " + (conn != null));						var onDbOpen:Function;			var onDbError:Function;						/*				Internal functions to capture event on successful open or DB error			*/									onDbOpen = function(event:SQLEvent):void{				//Logger.log("onDbOpen");				_currConnections++;				//Logger.log("ConnectionFactory: Open DB Connections -> " + _currConnections);				cbFunc(conn);			};						onDbError = function(err:SQLError):void{				//Logger.log("onDbError");				//Logger.log("DB Error Opening DB: " + err.message);				cbFunc(null);			};						var dbFile:File = new File(FileUtil.getCacheDir().nativePath + "/" + DB_NAME);			//Logger.log("DB File location: " + dbFile.nativePath);						try{				//Logger.log("Trying to open Async DB session.  Mode: " + mode);				conn.openAsync(dbFile, mode, new Responder(onDbOpen, onDbError));			}			catch(e:IllegalOperationError){				//Logger.log("an IllegalOperation error was caught");				cbFunc(null);			}			catch(e:ArgumentError){				//Logger.log("an Argument error was caught");					cbFunc(null);			}			catch(e:Error){				//Logger.log("a default error was caught");								cbFunc(null);			}		}				final public function releaseConnection(conn:SQLConnection):void{			//Logger.log("ConnectionFactory: releaseConnection called");			_currConnections--;			//Logger.log("ConnectionFactory: Open DB Connections -> " + _currConnections);			conn.close();		}						final public function destroy():void{			//Logger.log("ConnectionFactory: destroy called");			_currConnections = 0;			if(ConnectionFactory._instance != null)				ConnectionFactory._instance = null;					}			}}class SingletonEnforcer {	public function SingletonEnforcer():void {}}
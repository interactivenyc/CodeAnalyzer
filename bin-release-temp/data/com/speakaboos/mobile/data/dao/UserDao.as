package com.speakaboos.mobile.data.dao{	import com.speakaboos.mobile.data.db.connection.ConnectionStruct;	import com.speakaboos.ipad.events.CoreEventDispatcher;	import com.speakaboos.ipad.events.DBEvents;	import com.speakaboos.ipad.events.GenericDataEvent;	import com.speakaboos.ipad.models.data.UserProfile;		import flash.data.SQLMode;	import flash.data.SQLResult;	import flash.data.SQLStatement;	import flash.errors.IllegalOperationError;	import flash.errors.SQLError;	import flash.net.Responder;
			public class UserDao extends CoreDao	{						public function UserDao(){			CoreEventDispatcher.getInstance().addEventListener(DBEvents.ADD_USER_TO_DB, addUser);		}								override public function destroy():void{			//log(this, "destroy");			CoreEventDispatcher.getInstance().removeEventListener(DBEvents.ADD_USER_TO_DB);			super.destroy();		}						/**********************************************************/				/*			convenience function to release the connection and respond to the callback with a null result			generally used when an error occurs		*/		final private function releaseAndRespondNull(cbFunc:Function, cs:ConnectionStruct):void{			releaseConnection(cs);			cbFunc(null);		}								/**********************************************************/						/*					BEGIN getLastUserProfile()		*/					final public function getLastUserProfile(cbFunc:Function):void{			/////////////////////////////////////////////////			var onGotConnection:Function = function(cs:ConnectionStruct):void{								if(!cs){					cbFunc(null);					return;				}								doGetLastUserProfile(cs, cbFunc);							};			/////////////////////////////////////////////////			//Get the SQL Connection			getDbConn(onGotConnection, SQLMode.READ);		}						final private function doGetLastUserProfile(cs:ConnectionStruct, cbFunc:Function):void{						var onGetLastUserProfile:Function;			var onOpError:Function;						/////////////////////////////////////////////////			/*				BEGIN closures				process the SQL Query			*/			/////////////////////////////////////////////////			onGetLastUserProfile = function(result:SQLResult):void{				releaseConnection(cs);				//var theResult:SQLResult = stmt.getResult();				//trace(theResult.data);				gotLastUserProfile(result,cbFunc);			};									onOpError = function(err:SQLError):void{				releaseAndRespondNull(cbFunc, cs);			};									var stmt:SQLStatement = new SQLStatement(); 			stmt.sqlConnection = cs.connection; 			stmt.text = "SELECT * FROM users ORDER BY id DESC LIMIT 1";						try{				stmt.execute(-1, new Responder(onGetLastUserProfile, onOpError));			}			catch(err:IllegalOperationError){				releaseAndRespondNull(cbFunc, cs);			}			catch(err:SQLError){				releaseAndRespondNull(cbFunc, cs);			}							}				final private function gotLastUserProfile( result:SQLResult, cbFunc:Function):void{			//log("onGetLastUserProfile");									var userArray:Array = result.data as Array;						var userProfile:UserProfile = null;			if(userArray && userArray.length > 0){				//log(this,"got valid userProfile from db");				userProfile = new UserProfile();				userProfile.initFromDB(userArray[0]);			}			else{				//log(this, "userProfile result was null");			}						cbFunc(userProfile);						//_eventDispatcher.dispatchEvent(new GenericDataEvent(DBEvents.ON_GET_LAST_USER, {userProfile:userProfile}));		}				/*					END getLastUserProfile()		*/				/**********************************************************/						/*					BEGIN addUser()		*/				/*		TODO: REFACTOR, making addUser and saveUser one method		Note: there is no longer a need for both an insert and update on the user table.		we will always have no more than a single user.				*/				final public function addUser(e:GenericDataEvent):void{						var userProfile:UserProfile = e.data.userProfile as UserProfile;						var onGotConnection:Function = function(cs:ConnectionStruct):void{				if(cs)					{doAddUser(cs, userProfile);}			};						getDbConn(onGotConnection, SQLMode.UPDATE);		}								final private function doAddUser(cs:ConnectionStruct, userProfile:UserProfile):void{			//log("addNewUser: "+userProfile.email+", "+userProfile.user_id);			//log("fb_id: " + userProfile.fb_id);			//log(ObjectUtils.getGenericObject(userProfile));						var opDone:Function = function(result:SQLResult):void{				log(this, "doAddUser->Insert succeeded");				releaseConnection(cs);				onInsert(result);			};						var opError:Function = function(err:SQLError):void{				releaseConnection(cs);				onInsertError(err);			};						var subQ:String = "(SELECT id from users ORDER BY id DESC LIMIT 1), ";			var strSql:String = "INSERT OR REPLACE into users" + 				" (id, user_id, session, firstname, lastname, email, subscription_type, subscription_state, days_left, free_trial_used, fb_id, expiration_date, expiration_date_seconds, seconds_left, update_time)" + 				" values(" + subQ +":user_id, :session, :firstname, :lastname, :email, :subscription_type, :subscription_state, :days_left, :free_trial_used, :fb_id, :exp_date, :exp_date_seconds, :seconds_left, :update_time)";						var stmt:SQLStatement = new SQLStatement();						stmt.parameters[':user_id'] = userProfile.user_id;			stmt.parameters[':session'] = userProfile.session;			stmt.parameters[':firstname'] = userProfile.firstname;			stmt.parameters[':lastname'] = userProfile.lastname;			stmt.parameters[':email'] = userProfile.email;			stmt.parameters[':subscription_type'] = userProfile.subscription_type;			stmt.parameters[':subscription_state'] = userProfile.subscription_state;			stmt.parameters[':days_left'] = userProfile.days_left;			stmt.parameters[':free_trial_used'] = userProfile.free_trial_used;			stmt.parameters[':fb_id'] = userProfile.fb_id;			stmt.parameters[':exp_date'] = userProfile.expiration_date;			stmt.parameters[':exp_date_seconds'] = userProfile.expiration_date_seconds;			stmt.parameters[':seconds_left'] = userProfile.seconds_left;			stmt.parameters[':update_time'] = userProfile.update_time;			stmt.sqlConnection = cs.connection;						try{				stmt.text = strSql;				stmt.execute(-1, new Responder(opDone, opError));			}catch(e:IllegalOperationError){				log(this, "addNewUser-> SQL illegal operation error: " + e.message);				releaseConnection(cs);			}		}						final private function onInsert(result:SQLResult):void{			log(this, "onInsert");			CoreEventDispatcher.getInstance().dispatchEvent((new GenericDataEvent(DBEvents.USER_ADDED_TO_DB)));		}						final private function onInsertError(err:SQLError):void{			log(this, "onInsertError -> " + err.message);		}						/*					END addUser()		*/						/**********************************************************/						/*					BEGIN updateUser()		*/						final public function saveUser(userProfile:UserProfile):void{			log(this, "saving user to db");			var onGotConnection:Function = function(cs:ConnectionStruct):void{				if(cs)					{doUpdate(cs, userProfile);}			};						getDbConn(onGotConnection, SQLMode.UPDATE);		}								final private function doUpdate(cs:ConnectionStruct, userProfile:UserProfile):void{			log(this, "updateUser");			log(this, "userProfile.fb_id: " + userProfile.fb_id);						var opDone:Function = function(result:SQLResult):void{				releaseConnection(cs);				onUpdate(result);			};						var opError:Function = function(err:SQLError):void{				releaseConnection(cs);				onUpdateError(err);			};						/*			var strWhere:String = " WHERE user_id=:user_id";			var strSql:String = "INSERT OR REPLACE INTO users";			strSql += " SET session=:session, firstname=:firstname, lastname=:lastname, email=:email, password=:password, subscription_type=:subscription_type, subscription_state=:subscription_state, days_left=:days_left, free_trial_used=:free_trial_used, fb_id=:fb_id";			strSql += strWhere;			*/						var subQ:String = "(SELECT id from users ORDER BY id DESC LIMIT 1), ";			var strSql:String = "INSERT OR REPLACE into users" + 				" (id, user_id, session, firstname, lastname, email, subscription_type, subscription_state, days_left, free_trial_used, fb_id, expiration_date, expiration_date_seconds, seconds_left, update_time)" + 				" values(" + subQ +":user_id, :session, :firstname, :lastname, :email, :subscription_type, :subscription_state, :days_left, :free_trial_used, :fb_id, :exp_date, :exp_date_seconds, :seconds_left, :update_time)";						var stmt:SQLStatement = new SQLStatement();						stmt.parameters[':user_id'] = userProfile.user_id;			stmt.parameters[':session'] = userProfile.session;			stmt.parameters[':firstname'] = userProfile.firstname;			stmt.parameters[':lastname'] = userProfile.lastname;			stmt.parameters[':email'] = userProfile.email;			stmt.parameters[':subscription_type'] = userProfile.subscription_type;			stmt.parameters[':subscription_state'] = userProfile.subscription_state;			stmt.parameters[':days_left'] = userProfile.days_left;			stmt.parameters[':free_trial_used'] = userProfile.free_trial_used;			stmt.parameters[':fb_id'] = userProfile.fb_id;			stmt.parameters[':exp_date'] = userProfile.expiration_date;			stmt.parameters[':exp_date_seconds'] = userProfile.expiration_date_seconds;			stmt.parameters[':seconds_left'] = userProfile.seconds_left;			stmt.parameters[':update_time'] = userProfile.update_time;						stmt.sqlConnection = cs.connection;						try{				stmt.text = strSql;				stmt.execute(-1, new Responder(opDone, opError));			}catch(e:IllegalOperationError){				log(this, "saveUser-> SQL illegal operation error: " + e.message);				releaseConnection(cs);			}					}						final private function onUpdate(result:SQLResult):void{			log(this, "onUpdate: update successful");			CoreEventDispatcher.getInstance().dispatchEvent((new GenericDataEvent(DBEvents.USER_UPDATED_DB)));		}				final private function onUpdateError(err:SQLError):void{			log(this, "onUpdateError -> " + err.message);		}				/*					END updateUser()		*/						/**********************************************************/						/*					BEGIN updateSubscriptionStatus()		*/				/*			TODO: REFACTOR.			There is likely no longer the need for this method		*/					final public function updateSubscriptionStatus(userProfile:UserProfile):void{		    var onGotConn:Function = function(cs:ConnectionStruct):void{				if(cs)					{doUpdateSubscriptionStatus(cs, userProfile);}			};						getDbConn(onGotConn, SQLMode.UPDATE);		}								/* update users set subscription_state='active', subscription_type='free_trial' where user_id='111226'; */		/* REPLACE INTO my_table (pk_id, col1) VALUES (5, '123'); */		final private function doUpdateSubscriptionStatus(cs:ConnectionStruct, userProfile:UserProfile):void{						//var subQ:String = "select id from users where user_id=:uID";			//var strSql:String = "REPLACE INTO users (user_id,subscription_state, subscription_type) VALUES (" + subQ + ",:subState, :subType);";						//var strWhere:String = " WHERE user_id=(select user_id from users where user_id =':uID')";			//log("updateUserSubscriptionStatus");									var strWhere:String = " WHERE user_id=:uID";			var strSql:String = "UPDATE users SET subscription_type=:subType, subscription_state=:subState, session=:session" + strWhere;						var stmt:SQLStatement = new SQLStatement();						stmt.parameters[':subState'] = userProfile.subscription_state;			stmt.parameters[':subType'] = userProfile.subscription_type;			stmt.parameters[':uID'] = userProfile.user_id;			stmt.parameters[':session'] = userProfile.session;						stmt.text = strSql;			stmt.sqlConnection = cs.connection;			stmt.execute(-1, new Responder(onUpdateSubscriptionStatus, onUpdateSuscriptionError));					}				final private function onUpdateSubscriptionStatus(result:SQLResult):void{			CoreEventDispatcher.getInstance().dispatchEvent(new GenericDataEvent(DBEvents.SUBSCRIPTION_STATUS_UPDATED));					}				final private function onUpdateSuscriptionError(err:SQLError):void{			//log(this, "onUpdateSuscriptionError -> " + err.message);		}						/*			END updateSubscriptionStatus()		*/						/**********************************************************/						/*			BEGIN setSession()		*/				final public function setSession(u:UserProfile):void{			//log(this, "setSession");			var onGotConn:Function = function(cs:ConnectionStruct):void{				if(cs)					{doSetSession(cs, u);}			};						getDbConn(onGotConn, SQLMode.UPDATE);				}				final private function doSetSession(cs: ConnectionStruct, userProfile:UserProfile):void{			//log(this, "doSetSession");						var opDone:Function = function(result:SQLResult):void{				releaseConnection(cs);				onSetSession(result);			};						var opError:Function = function(err:SQLError):void{				releaseConnection(cs);				onSetSessionError(err);			};									var strWhere:String = " WHERE user_id=:uID";			var strSql:String = "UPDATE users SET session=:newSession" + strWhere;						var stmt:SQLStatement = new SQLStatement();						stmt.parameters[':newSession'] = userProfile.session;			stmt.parameters[':uID'] = userProfile.user_id;						stmt.text = strSql;						stmt.sqlConnection = cs.connection;			stmt.execute(-1, new Responder(opDone, opError));					}						final private function onSetSession(result:SQLResult):void{			//log(this, "onSetSession");			//_eventDispatcher.dispatchEvent((new GenericDataEvent(DBEvents.SUBSCRIPTION_STATUS_UPDATED));					}				final private function onSetSessionError(err:SQLError):void{			//log(this, "onSetSessionError -> " + err.message);		}						/*				END setSession()		*/						/**********************************************************/				/*				BEGIN deleteAllUsers()		*/				final public function deleteAllUsers():void{			//log(this, "deleteAll");						var onGotConn:Function = function(cs:ConnectionStruct):void{				if(cs)					{doDeleteAllUsers(cs);}			};						getDbConn(onGotConn, SQLMode.UPDATE);				}				final private function doDeleteAllUsers(cs:ConnectionStruct):void{			//log(this, "doDeleteAll -> deleting all users from users table");						var opDone:Function = function(result:SQLResult):void{				releaseConnection(cs);				onDeleteAll(result);			};						var opError:Function = function(err:SQLError):void{				releaseConnection(cs);				onDeleteAllError(err);			};									var stmt:SQLStatement = new SQLStatement();			stmt.text = "DELETE FROM users";			stmt.sqlConnection = cs.connection;			stmt.execute(-1, new Responder(opDone, opError));					}						final private function onDeleteAll(result:SQLResult):void{			//log(this, "onDeleteAll");			//log(event);		}				final private function onDeleteAllError(err:SQLError):void{			//log(this, "onDeleteAllError -> " + err.message);		}				/*			END deleteAllUsers()		*/				/**********************************************************/						}}
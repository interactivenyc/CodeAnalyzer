package com.speakaboos.mobile.data.dao{		import com.speakaboos.core.settings.AppConfig;	import com.speakaboos.ipad.utils.debug.Logger;	import com.speakaboos.mobile.data.db.connection.ConnectionStruct;	import com.speakaboos.mobile.data.db.connection.PoolController;	import com.speakaboos.mobile.data.db.error.GenericDbError;		import flash.data.SQLMode;	import flash.data.SQLResult;	import flash.data.SQLStatement;	import flash.errors.IllegalOperationError;	import flash.errors.SQLError;	import flash.net.Responder;
		public class CoreDao	{		public function CoreDao(){}						/**********************************************************/				/*				*/				protected static function getConnection(callback:Function, mode:String = SQLMode.READ):void{			PoolController.getInstance().getConnection(callback, mode);		}				protected static function releaseConnection(cs:ConnectionStruct):void{			PoolController.getInstance().releaseConnection(cs);		}				/*			Convenience function			calls callback with database connection		*/		protected static function getDbConn(cbFunc:Function, mode:String=SQLMode.READ):void{			try{				getConnection(cbFunc, mode);			}			catch(err:GenericDbError){				//log("CoreDao", err.message);				cbFunc(null);			}		}				/**********************************************************/						protected static function execute(stmt:SQLStatement, cbFunc:Function):void{						/*				calls cbFunc with SQLResult payload				on Error, throws GenericDbError			*/						try{				var onDone:Function = function(dbResult:SQLResult):void{					//log(this, "got database results")					cbFunc(dbResult);				};								var onError:Function = function(err:SQLError):void{					log(this, "db got error: " + err.message);					throw new GenericDbError(err.message);				};								stmt.execute(-1, new Responder(onDone, onError));							}			catch(err:IllegalOperationError){				throw new GenericDbError(err.message);			}			catch(err:SQLError){				throw new GenericDbError(err.message);			}				}						public function destroy():void{			if(PoolController.isActivated()){				PoolController.getInstance().destroy();			}		}					protected static function log(thisObj:Object, logItem:*, ...args):void{						if(!AppConfig.DEBUG_MODE){return;}						var category:Array = [thisObj.toString().replace("[object ", "").replace("]", "")];			Logger.log(logItem,category,true);						if (args.length > 0) {				Logger.log(args,[category[0]+"..."],true);			}		}					}}
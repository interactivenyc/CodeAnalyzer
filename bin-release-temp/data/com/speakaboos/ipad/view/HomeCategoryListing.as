package com.speakaboos.ipad.view{	import com.speakaboos.ipad.controller.AppController;	import com.speakaboos.ipad.events.AppEvents;	import com.speakaboos.ipad.events.GenericDataEvent;	import com.speakaboos.ipad.models.data.Category;	import com.speakaboos.ipad.models.data.HolderChildParams;	import com.speakaboos.ipad.utils.MovieClipUtils;	import com.speakaboos.ipad.view.components.CacheLoader;	import com.speakaboos.ipad.view.holders.CoreMovieClipHolder;	import com.speakaboos.ipad.view.holders.components.MCButton;	import com.speakaboos.story.events.CentralEventDispatcher;	import com.speakaboos.story.events.StoryEvent;	import com.speakaboos.story.utils.AnimationPlayer;		import flash.display.Bitmap;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.SecurityErrorEvent;	import flash.filesystem.File;	import flash.text.TextField;
		public class HomeCategoryListing extends CoreMovieClipHolder	{		public var container:MCButton;		public var title:TextField;		public var category:Category;		private var categoryIconLoader:CacheLoader;		private var _thumbnail:Bitmap;		private var _categoryIcon:MovieClip;		private var _flipDirection:int;		private var _firstDisplay:Boolean = true;		private var _animating:Boolean = false;				private var _localAssetsDirectory:File;		public static const FRAME_LABEL_PASSED:String = "FRAME_LABEL_PASSED";			public function HomeCategoryListing(pCategory:Category = null, pageDirection:int = 1){
			super(new HomeCategoryListingMC());			setupChildren(Vector.<HolderChildParams>([				new HolderChildParams("container", MCButton, null, new GenericDataEvent(AppEvents.GRID_ITEM_CLICKED, {slug:pCategory.slug})),				new HolderChildParams("title")			]));						if (pCategory) category = pCategory;
			if (AppController.viewMode == AppController.MODE_CATEGORIES && BookView.getInstance().getPageIndex() == 1){
				_flipDirection = 1;			}else{
				_flipDirection = -1;			}
		}				override public function onAddedToStage(e:Event = null):void{			//log("onAddedToStage");			super.onAddedToStage(e);			addEventListeners();			display();		}						override public function onRemovedFromStage(e:Event = null):void{			log("onRemovedFromStage");			destroy();			super.onRemovedFromStage(e);		}						private function addEventListeners():void{			_eventDispatcher.addEventListener(AppEvents.UPDATED_BITMAPS, startAnimation);//			_eventDispatcher.addEventListener(AppEvents.CAPTURE_LAYOUT_BITMAPS, startAnimation);			//			_eventDispatcher.addEventListener(AppEvents.CONNECTION_MODE_CHANGED, updateDisplay);//			_eventDispatcher.addEventListener(AppEvents.RESTRICTED_MODE_CHANGED, updateDisplay);//			//			_eventDispatcher.addEventListener(LoginEvents.ANONYMOUS_USER_LOGGED_IN, updateDisplay);//			_eventDispatcher.addEventListener(LoginEvents.USER_LOGGED_IN, updateDisplay);//			_eventDispatcher.addEventListener(AppEvents.LOGIN_SUCCESS, updateDisplay);//			_eventDispatcher.addEventListener(AppEvents.LOGOUT_USER, updateDisplay);						_eventDispatcher.addEventListener(AppEvents.USER_DATA_UPDATE_PROCESSED, updateDisplay);			//CentralEventDispatcher.getInstance().addEventListener( StoryEvent.END_FRAME_REACHED, handleEndFrame );		}				private function removeEventListeners():void{			_eventDispatcher.removeEventListener(AppEvents.UPDATED_BITMAPS, startAnimation);//			_eventDispatcher.removeEventListener(AppEvents.CAPTURE_LAYOUT_BITMAPS, startAnimation);			//			_eventDispatcher.removeEventListener(AppEvents.CONNECTION_MODE_CHANGED, updateDisplay);//			_eventDispatcher.removeEventListener(AppEvents.RESTRICTED_MODE_CHANGED, updateDisplay);//			//			_eventDispatcher.removeEventListener(LoginEvents.ANONYMOUS_USER_LOGGED_IN, updateDisplay);//			_eventDispatcher.removeEventListener(LoginEvents.USER_LOGGED_IN, updateDisplay);//			_eventDispatcher.removeEventListener(AppEvents.LOGIN_SUCCESS, updateDisplay);//			_eventDispatcher.removeEventListener(AppEvents.LOGOUT_USER, updateDisplay);						_eventDispatcher.removeEventListener(AppEvents.USER_DATA_UPDATE_PROCESSED, updateDisplay);			//CentralEventDispatcher.getInstance().removeEventListener( StoryEvent.END_FRAME_REACHED, handleEndFrame );		}						private function display():void{			//log("display: "+category.slug);			if (category==null) return;			title.visible = false;			title.text = category.short_title;						//log("display: "+title.text);						categoryIconLoader = new CacheLoader();			var iconURL:String;						iconURL = category.home_screen_category_icon;			categoryIconLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, onSWFLoaded);			categoryIconLoader.addEventListener(Event.COMPLETE, onSWFLoaded,false,0,true);			categoryIconLoader.addEventListener(IOErrorEvent.IO_ERROR, onIOError,false,0,true);			categoryIconLoader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, onIOError,false,0,true);			categoryIconLoader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityError,false,0,true);			categoryIconLoader.loadUrl(iconURL);								}				private function onSWFLoaded(e:Event):void{	//			log("onSWFLoaded");			_categoryIcon = categoryIconLoader.content as MovieClip;
			
//			_categoryIcon.gotoAndStop("loop:idle");//			_categoryIcon.addFrameScript(_categoryIcon.currentFrame-1, animFinished);			
			_categoryIcon.gotoAndStop(1);						mc.container.addChild(_categoryIcon);									//create hit area			var square:MovieClip = MovieClipUtils.getFilledMC(280,265);			square.alpha = 0;			square.x = 10;			square.y = 40;			container.addChild(square);						destroyLoader();			mc.dispatchEvent(new Event(AppEvents.THUMBNAIL_LOADED));			title.visible = true;		}		//		private function animFinished():void{//			log("animFinished: "+_categoryIcon.currentFrameLabel+" :: "+category.slug);//			AnimationPlayer.getInstance().play(_categoryIcon, "loop", "loop:idle");//		}				private function startAnimation():void{			updateDisplay();						if (getDisplayMode() == "FULL_ACCESS"  && _animating == false){				_animating = true;				if (_flipDirection == 1){					log("* AnimationPlayer PLAY ANIMATION RIGHT: "+category.slug);					AnimationPlayer.getInstance().play(_categoryIcon, "popup-right", "loop:idle");				}else{					log("* AnimationPlayer PLAY ANIMATION LEFT: "+category.slug);					AnimationPlayer.getInstance().play(_categoryIcon, "popup-left", "loop:idle");				}				CacheLoader.playAudioFromCachedUrl(category.popup_animation_audio);			}		}				private function getDisplayMode():String{			var displayMode:String = "FULL_ACCESS";						if (AppController.inRestrictedMode && category.savedStoryCount == 0){				displayMode = "RESTRICTED";			}else if (AppController.inOfflineMode) {				displayMode = "OFFLINE";			}						return displayMode;		}				public function updateDisplay(e:GenericDataEvent = null):void{			//if (e) log("* updateDisplay EVENT: "+e.type);			if (!_categoryIcon) return;			var displayMode:String = getDisplayMode();						//log("* updateDisplay: "+displayMode+" :: "+category.slug);						MovieClipUtils.reEnable(mc);						switch(displayMode){				case "FULL_ACCESS":					//log("* updateDisplay FULL_ACCESS: "+category.slug+", animating: "+_animating);					if (_firstDisplay == false) {						_animating = true;						AnimationPlayer.getInstance().play(_categoryIcon, "idle", "loop:idle");					}					break;				case "RESTRICTED":					//log("* updateDisplay RESTRICTED: "+category.slug);										AnimationPlayer.getInstance().stop(_categoryIcon.name);					if (AppController.inOfflineMode){						MovieClipUtils.hiliteAndDisable(mc);					}else{						MovieClipUtils.hiliteMC(mc);					}										_categoryIcon.gotoAndStop("disabled");					_firstDisplay = false;					break;				case "OFFLINE":										//log("* updateDisplay OFFLINE: "+category.slug);					_firstDisplay = false;					if (category.savedStoryCount == 0){						AnimationPlayer.getInstance().stop(_categoryIcon.name);						MovieClipUtils.hiliteAndDisable(mc);						_categoryIcon.gotoAndStop("disabled");					}else{						if (_flipDirection == 1){							//log("* AnimationPlayer PLAY ANIMATION RIGHT: "+category.slug);							AnimationPlayer.getInstance().play(_categoryIcon, "popup-right", "loop:idle");						}else{							//log("* AnimationPlayer PLAY ANIMATION LEFT: "+category.slug);							AnimationPlayer.getInstance().play(_categoryIcon, "popup-left", "loop:idle");						}					}					break;							}		}				//		private function handleEndFrame( evt:StoryEvent ):void {	//			if (evt.infoObj.movieClipName == _categoryIcon.name){//				//log("******************************");//				//log("handleEndFrame: "+evt.infoObj.frameLabel + " :: " + category.slug);//				_animating = false;//				//				var displayMode:String = getDisplayMode();//				//				//log("displayMode:"+displayMode);//				//				switch( evt.infoObj.frameLabel ) {//					case AnimationPlayer.FRAME_MAIN://					case AnimationPlayer.FRAME_IDLE://					case "popup-right-end"://					case "popup-left-end"://						//						_firstDisplay = false;//						//						if (displayMode == "FULL_ACCESS") {//							log("PLAY FRAME_IDLE");//							_animating = true;//							AnimationPlayer.getInstance().play(_categoryIcon, AnimationPlayer.FRAME_IDLE, AnimationPlayer.FRAME_LOOP_IDLE);//							break;//						}//						break;//				}//			}//		}								private function destroyLoader():void {			if (categoryIconLoader) {				categoryIconLoader.contentLoaderInfo.removeEventListener(Event.COMPLETE, onSWFLoaded);				categoryIconLoader.removeEventListener(Event.COMPLETE, onSWFLoaded);				categoryIconLoader.removeEventListener(IOErrorEvent.IO_ERROR, onIOError);				categoryIconLoader.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, onIOError);				categoryIconLoader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityError);				categoryIconLoader.destroy();				categoryIconLoader = null;			}		}				protected function onIOError(e:IOErrorEvent):void{			destroyLoader();			log("onIOError: " + e.text);			//dispatch this anyway			mc.dispatchEvent(new Event(AppEvents.THUMBNAIL_LOADED));					}				protected function onSecurityError(e:SecurityError):void{			destroyLoader();			log("onSecurityError: " + e.text);			//dispatch this anyway			mc.dispatchEvent(new Event(AppEvents.THUMBNAIL_LOADED));		}						override public function destroy():void {			//TODO: flesh this out			log("destroy");			removeEventListeners();			destroyLoader();			super.destroy();		}					}}

package com.speakaboos.ipad.view{	import com.greensock.TweenLite;	import com.speakaboos.ipad.controller.AppController;	import com.speakaboos.ipad.events.AppEvents;	import com.speakaboos.ipad.events.GenericDataEvent;	import com.speakaboos.ipad.models.data.HolderChildParams;	import com.speakaboos.ipad.models.services.SpeakaboosService;	import com.speakaboos.ipad.view.holders.CoreMovieClipHolder;	import com.speakaboos.ipad.view.holders.components.MCButton;		import flash.display.MovieClip;	import flash.events.Event;	import flash.events.TimerEvent;	import flash.events.TransformGestureEvent;	import flash.geom.Rectangle;	import flash.text.TextField;	import flash.utils.Timer;
		public class Billboard extends CoreMovieClipHolder	{		public var title:TextField;		public var promo:PromoScreen;		public var container:MovieClip;		public var curtains:MovieClip;		public var back:MovieClip;		public var piContainer:MovieClip;		public var frogAndTurtle:MovieClip;				private var _timer:Timer;		private var _piArray:Array = new Array();		private static var _promos:Array;		private static var _promoIndex:int = 0;				public static const slug:String = "billboard";				public function get savedStoryCount():int {			var result:int = 0;			return result;		}				private const OPEN:String = "OPEN";		private const CLOSED:String = "CLOSED";		public static const BILLBOARD_CLICK_EVENT:String = "BILLBOARD_CLICK";		public static const PROMO_LOADED_EVENT:String = "PROMO_LOADED";				public function Billboard(){			//log("CONSTRUCTOR");			super(new BillboardMC());			setupChildren(Vector.<HolderChildParams>([				new HolderChildParams("promo", PromoScreen),				new HolderChildParams("title"),				new HolderChildParams("frogAndTurtle"),				new HolderChildParams("piContainer"),				new HolderChildParams("curtains"),				new HolderChildParams("back")			]));						curtains.mouseEnabled = false;			curtains.mouseChildren = false;			back.mouseEnabled = false;			back.mouseChildren = false;			piContainer.mouseEnabled = false;			piContainer.mouseChildren = true;		}						override public function onAddedToStage(e:Event = null):void{			super.onAddedToStage(e);						//log("*********************");			//log("onAddedToStage");			//log("*********************");						addListerners();						container = promo.mc.container;			startTimer();						title.visible = false;						if (SpeakaboosService.getInstance().promos != null && _promos == null){				title.text = "";				loadPromos();				createIndicators();				//promo.setPromo(_promos[_promoIndex]);				rotate(0, false, true);			}else{				//log("SET UP AFTER REBIRTH");				loadPromos();				title.text = _promos[_promoIndex].short_title;				createIndicators();				rotate(0, false, true);			}		}								override public function onRemovedFromStage(e:Event = null):void{			super.onRemovedFromStage(e);						removeListerners();						if (_timer != null) {				_timer.stop();				_timer.removeEventListener(TimerEvent.TIMER, timerEvent);				_timer = null;			}		}				private function addListerners():void {			_eventDispatcher.addEventListener(BILLBOARD_CLICK_EVENT, onBillboardClicked);			_eventDispatcher.addEventListener(AppEvents.NEW_BUTTON_CLICK, onMCButtonClicked);			_eventDispatcher.addEventListener(AppEvents.ON_GESTURE, onGestureEvent);		}		private function removeListerners():void {			_eventDispatcher.removeEventListener(BILLBOARD_CLICK_EVENT, onBillboardClicked);			_eventDispatcher.removeEventListener(AppEvents.NEW_BUTTON_CLICK, onMCButtonClicked);			_eventDispatcher.removeEventListener(AppEvents.ON_GESTURE, onGestureEvent);		}				private function onBillboardClicked(e:GenericDataEvent):void {			_eventDispatcher.dispatchEvent(new GenericDataEvent(AppEvents.GRID_ITEM_CLICKED, {slug:slug, button:this}));		}				private function onMCButtonClicked(e:GenericDataEvent):void {						var promoIndex:int = _piArray.indexOf(e.data.button);			if (promoIndex < 0) return;			_promoIndex = promoIndex;			selectButton(_promoIndex);						_timer.reset();			_timer.start();						//log("onMCButtonClicked index: "+_promoIndex);			//rotate(0);			doSwipe(1)		}								private function loadPromos():void{			//log("loadPromos");			_promos = SpeakaboosService.getInstance().promos.allPromos;								}				private function createIndicators():void{			//log("createIndicators");			var mcButton:MCButton;			for (var j:int = 0; j < _promos.length; j++){				mcButton = new MCButton(new PromoIndicator());				mcButton.mc.gotoAndStop(1);				mcButton.x = (mcButton.width + 5) * j;				_piArray.push(mcButton);				piContainer.addChild(mcButton.mc);			}						piContainer.x = (curtains.width - piContainer.width)/2 - 200;			piContainer.y = 10;			piContainer.rotation += 1;		}				private function selectButton(index:int):void{			//log("selectButton: "+index);			var mcButton:MCButton;						if (index < 0) return;						for (var i:int = 0; i < _piArray.length; i++){				mcButton = (_piArray[i] as MCButton)				mcButton.selected = false;							}			try{				(_piArray[index] as MCButton).selected = true;				}catch (e:Error){				log("Error: "+e.message);			}					}				private function setIndicator():void{			//log("setIndicator");						for (var k:int = 0; k < piContainer.numChildren; k++) {				var promoIndicator:MCButton = _piArray[k] as MCButton;				if (k == _promoIndex) {					promoIndicator.downState = true;					TweenLite.to(promoIndicator.mc, .01, {colorTransform:{tint:0xFFFFFF, tintAmount:.65}});				}else{					promoIndicator.downState = false;					TweenLite.to(promoIndicator.mc, .01, {colorTransform:{tint:0xFFFFFF, tintAmount:0}});				}			}		}				private function startTimer():void{			//log("startTimer");			if (_timer == null){				_timer = new Timer(5000);				_timer.addEventListener(TimerEvent.TIMER, timerEvent,false,0,true);				_timer.start();			}		}				private function timerEvent(e:TimerEvent):void{			rotate(1);		}				private function rotate(direction:int, swiped:Boolean = false, skipCurtain:Boolean = false):void{			//log("rotate");			//log("*********************");						_promoIndex += direction;			if (_promoIndex < 0) _promoIndex = _promos.length - 1;			if (_promoIndex == _promos.length) _promoIndex = 0;						selectButton(_promoIndex);						if (swiped == true){				doSwipe(direction);			}else if (skipCurtain == true){				setIndicator();				setPromo();			}else{				closeCurtains();			}		}				private function doSwipe(direction:int):void{			promo.doSwipe(direction, _promos[_promoIndex]);			promo.addEventListener(PROMO_LOADED_EVENT, swipeDone);		}				private function swipeDone(direction:int):void{			promo.removeEventListener(PROMO_LOADED_EVENT, swipeDone);			title.text = _promos[_promoIndex].short_title;			setIndicator();		}				private function openCurtains():void{			//log("openCurtains");			curtains.gotoAndPlay("open");		}				private function closeCurtains():void{			//log("closeCurtains");			curtains.addEventListener(CLOSED, onClosed,false,0,true);			curtains.gotoAndPlay("close");		}				private function onClosed(e:Event):void{			//log("onClosed");			curtains.removeEventListener(CLOSED, onClosed);			setIndicator();			setPromo();		}				public function onAnimFinished():void{					}				private function setPromo():void{			promo.setPromo(_promos[_promoIndex]);			promo.addEventListener(PROMO_LOADED_EVENT, onPromoLoaded);		}		private function onPromoLoaded(e:Event):void{			promo.removeEventListener(PROMO_LOADED_EVENT, onPromoLoaded);						if (title.visible == false) title.visible = true;						title.text = _promos[_promoIndex].short_title;			if (promo.swiping == false) openCurtains();						frogAndTurtle.frog.play();			frogAndTurtle.turtle.gotoAndPlay("fwd");		}						public function getCurrentPromo():Object{			return _promos[_promoIndex];		}								private function onGestureEvent(gde:GenericDataEvent):void{			if (_timer != null){				_timer.reset();				_timer.start();			}									var e:TransformGestureEvent = gde.data.gestureEvent;						var billboardRect:Rectangle = new Rectangle(700,520,420,270);						if (AppController.viewMode == AppController.MODE_CATEGORIES){				if (billboardRect.contains(e.stageX, e.stageY)){					//log("Swipe within Billboard e.offsetX: "+e.offsetX);										if (e.offsetX == 1){						//log("onGestureEvent: forward");						rotate(-1, true);					}else{						//log("onGestureEvent: back");						rotate(1, true);					}				}			}		}				override public function destroy():void {			//TODO: flesh this out			log("destroy");			removeListerners();			curtains.removeEventListener(CLOSED, onClosed);			if (_piArray && _piArray.length) {				var promoIndicator:MCButton;				for (var i:int = 0; i< _piArray.length; i++) {					promoIndicator = _piArray[i] as MCButton;					TweenLite.killTweensOf(promoIndicator.mc); //TODO: maybe add this to baseclass					promoIndicator.destroy();					promoIndicator = null;				}				piContainer.removeChildren();				piContainer = null;			}			if (_timer) {				_timer.reset();				_timer = null;			}			if (promo) {				promo.removeEventListener(PROMO_LOADED_EVENT, swipeDone);				promo.destroy();				promo = null;			}			_promos = null;			super.destroy();		}	}}
package com.speakaboos.ipad.view.holders.components{	import com.speakaboos.ipad.models.data.HolderChildParams;	import com.speakaboos.ipad.view.holders.CoreMovieClipHolder;	import com.speakaboos.ipad.view.holders.components.ListingsItem;	import com.speakaboos.ipad.view.holders.modals.ModalDialog;		import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Rectangle;
	public class ListingsPanel extends CoreMovieClipHolder	{		public var fltr:MovieClip;		public var panelMask:MovieClip;		public var container:MovieClip;						private var _listings:Array;		private var _listingsType:Class;		private var _mcLoaded:Boolean = false;						public function ListingsPanel(_mc:MovieClip) {			super(_mc);			setupChildren(Vector.<HolderChildParams>([				new HolderChildParams("container"),				new HolderChildParams("fltr"),				new HolderChildParams("panelMask")			]));			log("constructor");			if (fltr) {				fltr.mouseEnabled = false;				fltr.mouseChildren = false;			}		}						override public function onAddedToStage(e:Event = null):void{			super.onAddedToStage(e);			log("onAddedToStage ListingsPanel adding mouse event for drag ");			container.addEventListener(MouseEvent.MOUSE_DOWN, startDragging); //,false,0,true);			_mcLoaded = true;			update();		}				override public function onRemovedFromStage(e:Event = null):void{			remove();			super.onRemovedFromStage(e);		}				private function remove():void
		{			if (container) {				container.removeEventListener(MouseEvent.MOUSE_UP, startDragging);				draggingStopped();			}
		}				public function itemBttnClicked(btn:MovieClip):void {			(parentHolder as ModalDialog).bttnClicked(btn); //pass click on to dialog		}				public function getListings():Array{			return _listings;		}				public function setListings(listings:Array, listingsType:Class = null):void{			_listingsType = listingsType || ListingsItem;			_listings = listings;			refresh();		}				private function update():void{			if (_mcLoaded && (_listings != null)) {				log("updating");				var listingsItem:ListingsItemBase;				var n:int = _listings.length;				for (var i:int=0; i<n; i++){					listingsItem = new _listingsType();					listingsItem.setBg(i);					listingsItem.listingsData = _listings[i];					listingsItem.y = listingsItem.height * i;					container.addChild(listingsItem.mc);				}			}		}				private function startDragging(e:*):void {			var dragMax:Number = container.height - panelMask.height;			if (dragMax > 0) {				container.startDrag(false, new Rectangle(container.x, 0, 0, - dragMax));				container.addEventListener(MouseEvent.MOUSE_MOVE, onDragging,false,0,true);				container.addEventListener(MouseEvent.MOUSE_UP, stopDragging,false,0,true);				container.addEventListener(MouseEvent.RELEASE_OUTSIDE, stopDragging,false,0,true);			}		}				private function onDragging(e:*):void{//			log(container.x + " : " + container.y);		}				private function stopDragging(e:*):void{			container.stopDrag();			draggingStopped();		}				private function draggingStopped():void{			container.removeEventListener(MouseEvent.MOUSE_MOVE, onDragging);			container.removeEventListener(MouseEvent.MOUSE_UP, stopDragging);			container.removeEventListener(MouseEvent.RELEASE_OUTSIDE, stopDragging);		}								public function deleteListing(searchStr:String):void{						var len:int = _listings.length;			if(!len){				log("_listings array is empty");				return;			}						var found:Boolean = false;						//TODO			/*			make this more generic so it doesn't refer to 'slug'			*/						for(var i:int = len-1; i >= 0; i--){				log("current listing: " + i + "slug: '" + _listings[i].slug + "' searchStr: '" + searchStr + "'");				if(_listings[i].slug == searchStr){					_listings.splice(i,1);					//container.removeChildAt(i); should not need this since the whole list is refreshed					log("deleted slug:" + searchStr + ", item: " + i);										found = true;					log("found...breaking...");										break;				}			}						if(found){				log("refreshing...");				refresh();			}			else				log("could not find slug: " + searchStr + "in _listings array");					}				public function refresh():void{						//TODO			/*				improve this.  it's too expensive			*/			log("refresh");			container.removeChildren();			update();		}							}}
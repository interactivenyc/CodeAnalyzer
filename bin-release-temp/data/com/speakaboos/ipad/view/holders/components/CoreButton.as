package com.speakaboos.ipad.view.holders.components{	import com.greensock.TweenLite;	import com.speakaboos.ipad.controller.AppController;	import com.speakaboos.ipad.events.AppEvents;	import com.speakaboos.ipad.events.GenericDataEvent;	import com.speakaboos.ipad.utils.HtmlTextUtil;	import com.speakaboos.ipad.view.holders.CoreMovieClipHolder;	import com.speakaboos.story.utils.AudioPlayer;		import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;
		public class CoreButton extends CoreMovieClipHolder	{		protected var _buttonSoundName:String = "GenericButtonPress";		protected var _buttonClickEvent:String = AppEvents.NEW_BUTTON_CLICK;				protected var _playAudio:Boolean = false;		public function get playAudio():Boolean {return _playAudio};		public function set playAudio(val:Boolean):void {_playAudio = val};				protected var _downState:Boolean = false;		public function get downState():Boolean {return _downState};		public function set downState(val:Boolean):void {_downState = val};				protected var _selected:Boolean = false;		public function get selected():Boolean {return _selected};		public function set selected(val:Boolean):void {_selected = val; downState = val;};						public function CoreButton(pMc:MovieClip){			super(pMc);		}				override public function onAddedToStage(e:Event = null):void{//			log("onAddedToStage core button "+this.name);			super.onAddedToStage(e);			addEventListener(MouseEvent.MOUSE_DOWN, onUIEvent,false,0,true);			addEventListener(MouseEvent.MOUSE_UP, onUIEvent,false,0,true);			addEventListener(MouseEvent.MOUSE_OUT, onUIEvent,false,0,true);			addEventListener(MouseEvent.CLICK, onUIEvent,false,0,true);		}				override public function onRemovedFromStage(e:Event = null):void{			//log("onRemovedFromStage core button "+this.name);			super.onRemovedFromStage(e);			TweenLite.killDelayedCallsTo(finishPress);			removeEventListener(MouseEvent.MOUSE_DOWN, onUIEvent);			removeEventListener(MouseEvent.MOUSE_UP, onUIEvent);			removeEventListener(MouseEvent.MOUSE_OUT, onUIEvent);			removeEventListener(MouseEvent.CLICK, onUIEvent);		}				public function press(immediate:Boolean = false):void {			log("press "+name+", immediate: "+immediate);			if(_playAudio) {				AudioPlayer.getInstance().playInternalSound(_buttonSoundName);			}			if (immediate) finishPress();		}				protected function finishPress():void {			log("finishPress "+name+", event:"+_buttonClickEvent);			downState = false;			_eventDispatcher.dispatchEvent(new GenericDataEvent(_buttonClickEvent, {button:this}));		}				protected function onUIEvent(e:MouseEvent):void{//			log("onUIEvent "+e.type+", "+this.name);			if (AppController.animating == true) return;			if (_selected == true) return;						switch(e.type){				case MouseEvent.MOUSE_DOWN:					downState = true;					press();					break;				case MouseEvent.MOUSE_UP:					/**					 * If button handling becomes sluggish again, move this back into MOUSE_DOWN					 * When it's in MOUSE_DOWN it interferes with Gesture Swipes, so I'm moving it here for now. -steve					 */					if (downState) finishPress(); //TweenLite.delayedCall(0.2, finishPress);				case MouseEvent.MOUSE_OUT:					downState = false;					break;				case MouseEvent.CLICK:					downState = false;					//press();					break;							}		}						public function set text(txt:String):void {			if ( mc.text &&  mc.text.label) {				HtmlTextUtil.setFieldText(mc.text.label, txt, HtmlTextUtil.BUTTON);			}		}		public function get text():String {			var result:String;			if ( mc.text &&  mc.text.label) {				result = mc.text.label.text;			}			return result;		}					}}
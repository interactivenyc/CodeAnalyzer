package com.speakaboos.ipad.view{	import com.speakaboos.ipad.controller.AppController;	import com.speakaboos.ipad.events.AppEvents;	import com.speakaboos.ipad.events.GenericDataEvent;	import com.speakaboos.ipad.models.services.SpeakaboosService;	import com.speakaboos.ipad.view.holders.CoreMovieClipHolder;		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.events.Event;	import flash.geom.Matrix;	import flash.geom.Rectangle;		/**	 * PAGE LAYOUTS ARE BEING CREATED AND DESTROYED WITH EVERY PAGE TURN.	 * THEY CONTAIN PAGEFLIPVIEW, SO BOTH CLASSES ARE TRANSIENT.	 * BOOKVIEW IS A SINGLETON, TO PROVIDE THESE CLASSES ACCESS TO ITEMS	 * SUCH AS CURRENT PAGE INFORMATION AND PAGE MOVIECLIPS.	 */	public class PageLayouts extends CoreMovieClipHolder	{			protected var _pageDirection:int;		protected var _numListings:int;		protected var _fromForwardBack:Boolean;				protected var _listingsItems:Array;		protected var listingItemMCs:Array;				protected var _pageLayoutLeftBitmapData:BitmapData;		protected var _pageLayoutRightBitmapData:BitmapData;		protected var _pageLayoutLeftBitmap:Bitmap;		protected var _pageLayoutRightBitmap:Bitmap;				protected var _speakaboosService:SpeakaboosService;				public static const PAGE_READY:String = "PAGE_READY";				public function PageLayouts(pMc:MovieClip){			super(pMc);			listingItemMCs = [];			_speakaboosService = SpeakaboosService.getInstance();			log("constructor");		}				override public function onAddedToStage(e:Event = null):void{			super.onAddedToStage(e);			addEventListeners();		}				private function addEventListeners():void {			_eventDispatcher.addEventListener(AppEvents.GRID_ITEM_CLICKED, onItemClicked);			_eventDispatcher.addEventListener(AppEvents.CAPTURE_LAYOUT_BITMAPS, captureBitmaps);		}				override public function onRemovedFromStage(e:Event = null):void{			super.onRemovedFromStage(e);			removeEventListeners();		}				private function removeEventListeners():void {			_eventDispatcher.removeEventListener(AppEvents.GRID_ITEM_CLICKED, onItemClicked);			_eventDispatcher.removeEventListener(AppEvents.CAPTURE_LAYOUT_BITMAPS, captureBitmaps);		}						protected function onItemClicked(e:GenericDataEvent):void {			// to be overridden by inheritor			log("onItemClicked PageLayouts");		}				public function setListings(listingsItems:Array, pageDirection:int, fromForwardBackButton:Boolean = false):void{			//log("setListings length: "+listings.length);						_pageDirection = pageDirection;			_numListings = listingsItems.length;			_listingsItems = listingsItems;			_fromForwardBack = fromForwardBackButton;						setupPage();		}						protected function setupPage():void {			// to be overridden by inheritor		}				protected function loadThumbs():void{			log("loadThumbs: "+new Date());			var itemListing:CoreMovieClipHolder;			for (var i:int=0; i<_listingsItems.length; i++){				itemListing = _listingsItems[i];				listingItemMCs[i].addChild(itemListing.mc);				itemListing.mc.addEventListener(AppEvents.THUMBNAIL_LOADED, thumbLoaded);			}		}				protected function thumbLoaded(e:Event):void{			var itemListing:MovieClip = e.target as MovieClip;			itemListing.removeEventListener(AppEvents.THUMBNAIL_LOADED, thumbLoaded);			_numListings --;						if(_numListings == 0) thumbsLoaded();		}				protected function thumbsLoaded():void{			log("*** thumbsLoaded");			AppController.animating = false;						if (BookView.getInstance().suppressPageFlips == true){				_eventDispatcher.dispatchEvent(new GenericDataEvent(AppEvents.THUMBNAILS_LOADED));			}else{				log("*** Event: CAPTURE_LAYOUT_BITMAPS");//				_eventDispatcher.dispatchEvent(new GenericDataEvent(AppEvents.CAPTURE_LAYOUT_BITMAPS));				captureBitmaps();			}		}				protected function captureBitmaps(e:GenericDataEvent=null):void{			log("*** captureBitmaps");			var pageLayoutLeftBitmap:Bitmap = getPageLeftBitmap();			pageLayoutLeftBitmap.smoothing = true;			var pageLayoutRightBitmap:Bitmap = getPageRightBitmap();			pageLayoutRightBitmap.smoothing = true;			_eventDispatcher.dispatchEvent(new GenericDataEvent(AppEvents.UPDATED_BITMAPS, {pageLayoutLeftBitmap:pageLayoutLeftBitmap, pageLayoutRightBitmap:pageLayoutRightBitmap}));		}						protected function getPageRightBitmap():Bitmap{			log("getPageRightBitmap");			_pageLayoutRightBitmapData = new BitmapData(602, 900, true, 0x000000);			_pageLayoutRightBitmapData.draw(mc, new Matrix(1,0,0,1,(-600),0), null, null, new Rectangle(0, 0, 602, 900));			_pageLayoutRightBitmap = new Bitmap(_pageLayoutRightBitmapData);			_pageLayoutRightBitmap.smoothing = true;						return _pageLayoutRightBitmap;		}				protected function getPageLeftBitmap():Bitmap{			log("getPageLeftBitmap");			_pageLayoutLeftBitmapData = new BitmapData(602, 900, true, 0x000000);			_pageLayoutLeftBitmapData.draw(mc, null, null, null, new Rectangle(0, 0, 602, 900));			_pageLayoutLeftBitmap = new Bitmap(_pageLayoutLeftBitmapData);			_pageLayoutLeftBitmap.smoothing = true;						return _pageLayoutLeftBitmap;		}				override public function destroy():void{			log("destroy");			removeEventListeners();			var listingsItemMC:DisplayObject;			if (_listingsItems && listingItemMCs) {				for (var i:int=0; i<_listingsItems.length; i++){					if (_listingsItems[i]) {						listingsItemMC = _listingsItems[i].mc;						if (listingsItemMC  && listingItemMCs[i].contains(listingsItemMC)) {							listingItemMCs[i].removeChild(listingsItemMC);							_listingsItems[i].destroy();						}						listingItemMCs[i] = null;						_listingsItems[i] = null;					}				}			}			_listingsItems = null;			//_pageLayoutLeftBitmapData.dispose();			_pageLayoutLeftBitmapData = null;			//_pageLayoutRightBitmapData.dispose();			_pageLayoutRightBitmapData = null;			_pageLayoutLeftBitmap = null;			_pageLayoutRightBitmap = null;			listingItemMCs = null;			super.destroy();			removeChildren();		}					}		}
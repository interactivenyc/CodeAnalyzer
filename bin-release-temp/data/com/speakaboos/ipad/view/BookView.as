package com.speakaboos.ipad.view{	import com.greensock.TweenLite;	import com.speakaboos.ipad.controller.AppController;	import com.speakaboos.ipad.events.AppEvents;	import com.speakaboos.ipad.events.GenericDataEvent;	import com.speakaboos.ipad.events.ModalEvents;	import com.speakaboos.ipad.events.NavEvents;	import com.speakaboos.ipad.events.SpeakaboosServiceEvents;	import com.speakaboos.ipad.models.data.HolderChildParams;	import com.speakaboos.ipad.models.data.ModalsInfo;	import com.speakaboos.ipad.models.data.Story;	import com.speakaboos.ipad.models.services.SpeakaboosService;	import com.speakaboos.ipad.utils.MovieClipUtils;	import com.speakaboos.ipad.view.components.CacheLoader;	import com.speakaboos.ipad.view.holders.CoreMovieClipHolder;	import com.speakaboos.ipad.view.holders.components.MCButton;	import com.speakaboos.ipad.view.holders.components.PreferencesButton;	import com.speakaboos.story.events.CentralEventDispatcher;	import com.speakaboos.story.events.StoryEvent;	import com.speakaboos.story.utils.AudioPlayer;		import flash.display.Bitmap;	import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.TransformGestureEvent;	import flash.geom.Rectangle;
		public class BookView extends CoreMovieClipHolder	{		private static var _instance:BookView;		private var _background:MovieClip;				public var btn_fwd:MCButton;		public var btn_back:MCButton;		public var btn_home:MCButton;		public var btn_category:MCButton;		public var btn_preferences:PreferencesButton;		public var viewContainer:MovieClip;		public var characterWheel:CharacterWheel;				public var pageLeft:MovieClip;		public var pageRight:MovieClip;		public var pageDirection:int;				public var pageLayoutLeftBitmap:Bitmap;		public var pageLayoutRightBitmap:Bitmap;				private var _currentView:CoreMovieClipHolder;		public function get currentView():CoreMovieClipHolder {return _currentView};				private var _loader:CacheLoader;						private var categoryPageIndex:int;		private var storyPageIndex:int;				public var suppressPageFlips:Boolean = false;						public function BookView(enforcer:SingletonEnforcer){			super(MovieClipUtils.getLibraryMC("BookViewMC"));			setupChildren(Vector.<HolderChildParams>([				new HolderChildParams("btn_fwd", MCButton, onButtonClicked),				new HolderChildParams("btn_back", MCButton, onButtonClicked),				new HolderChildParams("btn_home", MCButton, onButtonClicked),				new HolderChildParams("btn_category", MCButton, onButtonClicked),				new HolderChildParams("btn_preferences", PreferencesButton, onButtonClicked),				new HolderChildParams("characterWheel", CharacterWheel),				new HolderChildParams("viewContainer"),				new HolderChildParams("pageLeft"),				new HolderChildParams("pageRight"),				new HolderChildParams("title")			]));		}		public static function get instantiated():Boolean {return Boolean(_instance)};		public static function getInstance():BookView {			if(!_instance) {				_instance = new BookView( new SingletonEnforcer() );			}			return _instance;		}		public static function destroySingleton():void {			if (instantiated) _instance.destroy();		}				override public function onAddedToStage(e:Event = null):void{			super.onAddedToStage(e);						addListeners();													btn_fwd.visible = false;			btn_back.visible = false;			btn_home.visible = false;			btn_category.visible = false;									btn_fwd.playAudio = true;			btn_back.playAudio = true;			btn_home.playAudio = true;			btn_category.playAudio = true;						_background = MovieClipUtils.getLibraryMC("Background");			_background.x = -(_background.width - stage.width)/2 - 200;			mc.addChildAt(_background,0);		}				override public function onRemovedFromStage(e:Event = null):void{			super.onRemovedFromStage(e);			removeListeners();		}				private function addListeners():void {			_eventDispatcher.addEventListener(AppEvents.SHOW_HOME_SCREEN, receiveEvent);			_eventDispatcher.addEventListener(AppEvents.PAGE_FLIP_START, receiveEvent);			_eventDispatcher.addEventListener(AppEvents.PAGE_FLIP_FINISHED, receiveEvent);			_eventDispatcher.addEventListener(AppEvents.CHANGE_VIEW_MODE, receiveEvent);			_eventDispatcher.addEventListener(AppEvents.SHOW_PAGE_BUTTONS, receiveEvent);			_eventDispatcher.addEventListener(AppEvents.THUMBNAILS_LOADED, receiveEvent);			_eventDispatcher.addEventListener(AppEvents.UPDATED_BITMAPS, receiveEvent);			_eventDispatcher.addEventListener(AppEvents.ON_GESTURE, onGestureEvent);						_eventDispatcher.addEventListener(NavEvents.SET_PAGE, receiveEvent);						CentralEventDispatcher.getInstance().addEventListener(StoryEvent.START_STORY, onStoryEvent);			CentralEventDispatcher.getInstance().addEventListener(StoryEvent.LOAD_STORY, onStoryEvent);			CentralEventDispatcher.getInstance().addEventListener(StoryEvent.DISPLAY_CATEGORY_BUTTON, onStoryEvent);			CentralEventDispatcher.getInstance().addEventListener(StoryEvent.EXIT_STORY, onStoryEvent);			CentralEventDispatcher.getInstance().addEventListener(StoryEvent.RETURN_TO_TITLE_SCREEN, onStoryEvent);			CentralEventDispatcher.getInstance().addEventListener(StoryEvent.STOP_STORY_LOAD, onStoryEvent);			CentralEventDispatcher.getInstance().addEventListener(StoryEvent.LOAD_RELATED_STORY, onStoryEvent);			CentralEventDispatcher.getInstance().addEventListener(StoryEvent.SERVICE_ERROR, onStoryEvent);			btn_preferences.mc.addEventListener(AppEvents.BUTTON_CLICK, showPreferences);		}				private function removeListeners():void {			_eventDispatcher.removeEventListener(AppEvents.ON_GESTURE, onGestureEvent);						_eventDispatcher.removeEventListener(AppEvents.SHOW_HOME_SCREEN, receiveEvent);			_eventDispatcher.removeEventListener(AppEvents.PAGE_FLIP_START, receiveEvent);			_eventDispatcher.removeEventListener(AppEvents.PAGE_FLIP_FINISHED, receiveEvent);			_eventDispatcher.removeEventListener(AppEvents.CHANGE_VIEW_MODE, receiveEvent);			_eventDispatcher.removeEventListener(AppEvents.SHOW_PAGE_BUTTONS, receiveEvent);			_eventDispatcher.removeEventListener(AppEvents.THUMBNAILS_LOADED, receiveEvent);			_eventDispatcher.removeEventListener(AppEvents.UPDATED_BITMAPS, receiveEvent);						_eventDispatcher.removeEventListener(NavEvents.SET_PAGE, receiveEvent);						CentralEventDispatcher.getInstance().removeEventListener(StoryEvent.START_STORY, onStoryEvent);			CentralEventDispatcher.getInstance().removeEventListener(StoryEvent.LOAD_STORY, onStoryEvent);			CentralEventDispatcher.getInstance().removeEventListener(StoryEvent.DISPLAY_CATEGORY_BUTTON, onStoryEvent);			CentralEventDispatcher.getInstance().removeEventListener(StoryEvent.EXIT_STORY, onStoryEvent);			CentralEventDispatcher.getInstance().removeEventListener(StoryEvent.RETURN_TO_TITLE_SCREEN, onStoryEvent);			CentralEventDispatcher.getInstance().removeEventListener(StoryEvent.STOP_STORY_LOAD, onStoryEvent);			CentralEventDispatcher.getInstance().removeEventListener(StoryEvent.LOAD_RELATED_STORY, onStoryEvent);			CentralEventDispatcher.getInstance().removeEventListener(StoryEvent.SERVICE_ERROR, onStoryEvent);						if (btn_preferences.mc) btn_preferences.mc.removeEventListener(AppEvents.BUTTON_CLICK, showPreferences);		}						private function turnPage(direction:int):void{			log("*** turnPage: "+direction);			_eventDispatcher.dispatchEvent(new GenericDataEvent(AppEvents.CHECK_ONLINE_STATE));			pageDirection = direction;						if (direction == 1){				if (btn_fwd.visible == false) return; 				AudioPlayer.getInstance().stopAllSounds();				AudioPlayer.getInstance().playInternalSound(AudioPlayer.SOUND_GENERIC_BUTTON_PRESS);				AudioPlayer.getInstance().playInternalSound(AudioPlayer.SOUND_SINGLE_PAGE_TURN);				AudioPlayer.getInstance().playInternalSound("VONextPageSound");								(_currentView as CoreListingsView).turnPage(1);			}else{				if (btn_back.visible == false) return;				AudioPlayer.getInstance().stopAllSounds();				AudioPlayer.getInstance().playInternalSound(AudioPlayer.SOUND_GENERIC_BUTTON_PRESS);				AudioPlayer.getInstance().playInternalSound(AudioPlayer.SOUND_MULTI_PAGE_TURN);				AudioPlayer.getInstance().playInternalSound("VOPreviousPageSound");								(_currentView as CoreListingsView).turnPage(-1);			}						AppController.animating = true;			AppController.newSection = false;		}														public function showCategories(pageIndex:int = 0):void{			log("showCategories");						_eventDispatcher.dispatchEvent(new GenericDataEvent(AppEvents.CHANGE_VIEW_MODE, {viewMode:AppController.MODE_CATEGORIES}));						showElement(btn_category, false);			showElement(btn_home, false);			showElement(characterWheel, true);						var categoryListingsView:CoreListingsView = new CoreListingsView();			showView(categoryListingsView);		}								public function showStories(pageIndex:int = 0):void{			//log("showStories", SpeakaboosService.getInstance().category.storySlugs);			if (AppController.newSection == true){				pageIndex = 0;			}						log("showStories pageIndex: "+pageIndex);						_eventDispatcher.dispatchEvent(new GenericDataEvent(AppEvents.CAPTURE_LAYOUT_BITMAPS));			_eventDispatcher.dispatchEvent(new GenericDataEvent(AppEvents.CHANGE_VIEW_MODE, {viewMode:AppController.MODE_STORIES}));						showElement(btn_category, false);			showElement(characterWheel, false);						var storyListingsView:CoreListingsView = new CoreListingsView();			showView(storyListingsView);		}				public function showStory(story:Story):void {			log("showStory "+story.slug);			_eventDispatcher.dispatchEvent(new GenericDataEvent(AppEvents.CHANGE_VIEW_MODE, {viewMode:AppController.MODE_STORY}));						showElement(characterWheel, false);						var storyView:StoryView = new StoryView();			storyView.story = story;			showView(storyView);						var service:SpeakaboosService = SpeakaboosService.getInstance();						if (!service.category) {				service.setCategoryBySlug(story.categories[0]);			}						if (story.isPromo) {				//log("story is promo, don't show category icon");			} else {				//log("story is not a promo, load category icon");				_loader = new CacheLoader();				var url:String = service.category.story_screen_category_icon;				if (url) {					showElement(btn_category, false);					_loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onIconLoaded);					_loader.loadUrl(url);					//log("load category back icon: "+url);				}			}		}				protected function onIconLoaded(e:Event):void{			log("onIconLoaded");			btn_category.removeChildren();			var bitmap:Bitmap = Bitmap(_loader.content);			bitmap.width = 225;			bitmap.scaleY = bitmap.scaleX;			bitmap.smoothing = true;			btn_category.addChild(bitmap);			//showElement(btn_category, true);		}						public function showView(view:CoreMovieClipHolder):void{						removeCurrentView();			_currentView = view;			viewContainer.addChild(_currentView.mc);//			flash.debugger.enterDebugger();			log("showView "+ AppController.viewMode);			switch(AppController.viewMode) {				case AppController.MODE_CATEGORIES:					btn_preferences.visible = !AppController.inOfflineMode;					btn_home.visible = false;					break;				case AppController.MODE_STORIES:					btn_preferences.visible = false;					showElement(btn_home, true);					break;				case AppController.MODE_STORY:					btn_preferences.visible = false;					showElement(btn_home, false);					if (!AppController.currentStory.isPromo) btn_category.visible = true;					break;			}		}						public function removeCurrentView():void{			log("removeCurrentView - try to destroy current view");			if (_currentView != null) {				log("destroy current view");				_currentView.destroy();				_currentView.removeChildren();				viewContainer.removeChildren();				showElement(btn_fwd, false);				showElement(btn_back, false);			}			_currentView = null;		}						private function goHome(e:Event = null):void{			//log("goHome");			if (_currentView is StoryView) {				(_currentView as StoryView).exitStory();			}						log("*** Event: CAPTURE_LAYOUT_BITMAPS");			_eventDispatcher.dispatchEvent(new GenericDataEvent(AppEvents.CHECK_ONLINE_STATE));			_eventDispatcher.dispatchEvent(new GenericDataEvent(AppEvents.CAPTURE_LAYOUT_BITMAPS));			_eventDispatcher.dispatchEvent(new GenericDataEvent(NavEvents.GO_HOME));			showCategories(categoryPageIndex);						btn_home.visible = false;			btn_preferences.visible = !AppController.inOfflineMode;			btn_category.visible = false;		}						private function showPageFwdBack():void{			var pageIndex:int = getPageIndex();			var numPages:int = (_currentView as CoreListingsView).numPages;							if (numPages == 1){				showElement(btn_fwd, false);				showElement(btn_back, false);			}else{				if (pageIndex == 0) {					showElement(btn_fwd);					showElement(btn_back, false);				}else if (pageIndex == (numPages-1)) {					showElement(btn_fwd, false);					showElement(btn_back);				}else{					showElement(btn_fwd);					showElement(btn_back);				}			}		}								private function showElement(whichElement:CoreMovieClipHolder, tf:Boolean = true):void{			//log("showElement: tf: "+tf+", whichElement: "+whichElement);			if (whichElement.visible == tf) {				whichElement.alpha = 1;				return;			}			if (tf == true) {				turnOn(whichElement);			}else{				turnOff(whichElement);			}					}				private function turnOff(whichElement:CoreMovieClipHolder):void{			whichElement.visible = false;			whichElement.alpha = 1;		}				private function turnOn(whichElement:CoreMovieClipHolder):void{			//log("turnOn: "+turnOn);			whichElement.alpha = 0;			whichElement.visible = true;			TweenLite.to(whichElement, .5, {alpha:1});		}					private function onGestureEvent(gde:GenericDataEvent):void{						var e:TransformGestureEvent = gde.data.gestureEvent;			var charRect:Rectangle = new Rectangle(0,520,420,380);			var billboardRect:Rectangle = new Rectangle(700,520,420,270);						if (AppController.viewMode == AppController.MODE_CATEGORIES){				if (charRect.contains(e.stageX, e.stageY)){					log("Swipe within Character Wheel");					characterWheel.onSwipe(e.offsetX);									}else if (billboardRect.contains(e.stageX, e.stageY)){					log("Swipe within Billboard");				}else{					turnPage(-e.offsetX);				}			}else{				turnPage(-e.offsetX);			}		}						private function receiveEvent(e:GenericDataEvent):void{						log("receiveEvent: "+e.type);						switch(e.type){				case NavEvents.SET_PAGE:					//set visibility of forward and back buttons					//showPageFwdBack();					if (AppController.viewMode == AppController.MODE_CATEGORIES && AppController.previousViewMode == AppController.MODE_STORY){												//this is where duplicate characterwheel graphic needs to be cleared					}										break;				case AppEvents.PAGE_FLIP_START:					characterWheel.visible = false;					break;				case AppEvents.PAGE_FLIP_FINISHED:					AppController.animating = false;					if (AppController.viewMode == AppController.MODE_CATEGORIES) {						showElement(characterWheel, true);					}else if (AppController.viewMode == AppController.MODE_STORIES){						showElement(btn_home, true);					}					showPageFwdBack();					suppressPageFlips = false;					break;				case AppEvents.THUMBNAILS_LOADED:					break;				case AppEvents.UPDATED_BITMAPS:					log("UPDATED_BITMAPS  event");					pageLayoutLeftBitmap = e.data.pageLayoutLeftBitmap;					pageLayoutRightBitmap = e.data.pageLayoutRightBitmap;					break;				case AppEvents.SHOW_PAGE_BUTTONS:					showPageFwdBack();					break;				case AppEvents.SHOW_HOME_SCREEN:					goHome();					break;//				case AppEvents.PLAY_FREE_STORY://					btn_home.visible = true;//					btn_fwd.visible = false;//					btn_back.visible = false;//					btn_category.visible = false;//					characterWheel.visible = false;//					break;//				case AppEvents.SHOW_TITLE_SCREEN_RELATED_STORY://					_eventDispatcher.dispatchEvent(new GenericDataEvent(ModalEvents.HIDE_LOADER));//					btn_home.visible = true;//					btn_category.visible = true;//					break;				case AppEvents.CHANGE_VIEW_MODE:					var viewMode:String = e.data.viewMode;					//log("CHANGE_VIEW_MODE: "+viewMode);					switch(viewMode){						case AppController.MODE_CATEGORIES:							storyPageIndex = 0;							btn_preferences.visible = !AppController.inOfflineMode;							btn_home.visible = false;							break;						case AppController.MODE_STORIES:							btn_preferences.visible = false;							showElement(btn_home, true);							break;						case AppController.MODE_STORY:							btn_preferences.visible = false;														if (!AppController.currentStory.isPromo) {								btn_category.visible = true;							}							showElement(btn_home, true);							break;					}			}		}						public function getPageIndex():int{			var returnIndex:int;			if (AppController.viewMode == AppController.MODE_CATEGORIES){				returnIndex = categoryPageIndex;			}else if (AppController.viewMode == AppController.MODE_STORIES){				returnIndex = storyPageIndex			}						return returnIndex;		}				public function setPageIndex(index:int):void{			var returnIndex:int;			if (AppController.viewMode == AppController.MODE_CATEGORIES){				categoryPageIndex = index;			}else if (AppController.viewMode == AppController.MODE_STORIES){				storyPageIndex = index;			}		}				public function setPages(leftMC:DisplayObject, rightMC:DisplayObject):void {			log("setPages checkForNullDisplayObject: "+leftMC);						pageLeft.container.removeChildren();			pageRight.container.removeChildren();						if (leftMC == null || rightMC == null){				log("Set Pages - MC's are null");				if (AppController.viewMode == AppController.MODE_CATEGORIES && AppController.previousViewMode == AppController.MODE_STORY){					log("Special Case - returning back to home screen directly from Story - don't add duplicate character wheel");					pageLeft.container.addChild(MovieClipUtils.getLibraryMC("left_category").container.getChildAt(0));				}				return;			}						if (AppController.viewMode == AppController.MODE_CATEGORIES || AppController.viewMode == AppController.MODE_STORIES){				pageLeft.container.addChild(leftMC);				pageRight.container.addChild(rightMC);			}		}										private function onButtonClicked(target:DisplayObject):void{			log("onButtonClicked target.name: "+target.name);						if (AppController.animating == true) return;						switch (target.name){				case "btn_fwd":					turnPage(1);					break;				case "btn_back":					turnPage(-1);					break;				case "btn_home":					AppController.categoryBack = true;										AudioPlayer.getInstance().stopAllSounds();					AudioPlayer.getInstance().playInternalSound(AudioPlayer.SOUND_GENERIC_BUTTON_PRESS);					AudioPlayer.getInstance().playInternalSound("VOHomeSound");										goHome();					break;				case "btn_category":					log("categoryClicked: target: "+target.name);										AppController.categoryBack = true;					suppressPageFlips = true;										_eventDispatcher.dispatchEvent(new GenericDataEvent(NavEvents.GO_CATEGORY));										var service:SpeakaboosService = SpeakaboosService.getInstance();										AudioPlayer.getInstance().stopAllSounds();					AudioPlayer.getInstance().playInternalSound(AudioPlayer.SOUND_GENERIC_BUTTON_PRESS);					CacheLoader.playAudioFromCachedUrl(service.category.category_title_audio);										_eventDispatcher.dispatchEvent(new GenericDataEvent(SpeakaboosServiceEvents.STORIES_LOADED));					break;				case "btn_preferences":					_eventDispatcher.dispatchEvent(new GenericDataEvent(AppEvents.SHOW_PREFERENCES));					break;							}					}				private function showPreferences(e:Event=null):void{			_eventDispatcher.dispatchEvent(new GenericDataEvent(AppEvents.SHOW_PREFERENCES));		}				private function onStoryEvent(e:StoryEvent):void{			log("*** onStoryEvent: "+e.type)						switch (e.type){				case StoryEvent.LOAD_STORY:					btn_fwd.visible = false;					btn_back.visible = false;					break;				case StoryEvent.PLAY_LOADED_STORY:					break; 				case StoryEvent.DISPLAY_CATEGORY_BUTTON:					if (AppController.currentStory.isPromo == true) {						showElement(btn_category, false);					}else{						showElement(btn_category, true);					}					showElement(btn_home, true);					break; 				case StoryEvent.START_STORY:					btn_fwd.visible = false;					btn_back.visible = false;					btn_home.visible = false;					btn_category.visible = false;					break;				case StoryEvent.LOAD_RELATED_STORY:					var story:Story =	SpeakaboosService.getInstance().getStoryBySlug( e.infoObj.slug);					story.isPromo = false;					SpeakaboosService.getInstance().setCategoryBySlug(story.categories[0]);					_eventDispatcher.dispatchEvent(new GenericDataEvent(SpeakaboosServiceEvents.LOAD_STORY, {story:story}));					btn_home.visible = true;					btn_category.visible = true;					break;				case StoryEvent.RETURN_TO_TITLE_SCREEN:				case StoryEvent.EXIT_STORY:				case StoryEvent.STOP_STORY_LOAD:					_eventDispatcher.dispatchEvent(new GenericDataEvent(ModalEvents.HIDE_LOADER));					btn_home.visible = true;					if (AppController.currentStory.isPromo != true) btn_category.visible = true;					break;				case StoryEvent.STREAM_ERROR:				case StoryEvent.SERVICE_ERROR:					//TODO: show a dialog?					_eventDispatcher.dispatchEvent(new GenericDataEvent(ModalEvents.SHOW_MODAL, {id:ModalsInfo.ERROR_STORY_LOAD_ID}));					btn_home.visible = true;					btn_category.visible = true;					break;			}		}		override public function destroy():void {			log("destroy");			removeListeners();			if (_currentView) _currentView.destroy();			_currentView = null;			if (_loader) _loader.destroy();			_loader = null;			_instance = null;			super.destroy();		}	}}class SingletonEnforcer {	public function SingletonEnforcer():void {}}
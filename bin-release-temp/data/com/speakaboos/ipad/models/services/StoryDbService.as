/** *  * @langversion ActionScript 3.0 * @playerversion Flash 11.0 *  * StoryDbService: a controller for StoryDao */package com.speakaboos.ipad.models.services{	import com.speakaboos.ipad.events.AppEvents;	import com.speakaboos.ipad.events.CoreEventDispatcher;	import com.speakaboos.ipad.events.DBEvents;	import com.speakaboos.ipad.events.GenericDataEvent;	import com.speakaboos.ipad.models.data.Story;	import com.speakaboos.mobile.data.dao.StoryDao;
		public class StoryDbService extends CoreService	{		private static var _instance:StoryDbService;		private var _storyDao:StoryDao;		private var _storyCount:int = 0;								public function StoryDbService( enforcer:SingletonEnforcer ):void{			//log("constructor");			super();			if( enforcer == null ) throw new Error( "StoryDbService is a singleton class and should only be instantiated via its static getInstance() method" );		}				public static function getInstance():StoryDbService {			if( _instance == null ) {				_instance = new StoryDbService( new SingletonEnforcer() );				_instance.addEventListeners();			}			return _instance;		}				override public function destroy():void{						removeEventListeners();			if(_storyDao)				_storyDao.destroy();						_storyDao = null;						if(_instance)				_instance = null;						super.destroy();					}				final private function addEventListeners():void{			_eventDispatcher.addEventListener(AppEvents.STORY_ASSETS_LOADED, receiveEvent);		}						final private function removeEventListeners():void{			_eventDispatcher.removeEventListener(AppEvents.STORY_ASSETS_LOADED, receiveEvent);		}				///////////////////////////////////////////////				final private function get storyDao():StoryDao{						if(_storyDao)				return _storyDao;						_storyDao = new StoryDao();			return _storyDao;		}								final public function get storyCount():int{			return _storyCount;		}				///////////////////////////////////////////////		final public function queryStories(category:String = null, categoryType:String = null):void{			storyDao.getStoriesByCategory(category);		}								final public function querySavedStories(fullAccess:Boolean=false, maxStories:int=3):void{			log("querySavedStories");			storyDao.getSavedStories(fullAccess, maxStories);		}						final public function getStoryBySlug(slug:String):void{			storyDao.getStoryBySlug(slug);		}				final public function getSavedStoryCount():void{			CoreEventDispatcher.getInstance().addEventListener(DBEvents.STORY_COUNT_RETRIEVED, onGetSavedStoryCount);			storyDao.getSavedStoryCount();		}				final private function onGetSavedStoryCount(e:GenericDataEvent):void{			CoreEventDispatcher.getInstance().removeEventListener(DBEvents.STORY_COUNT_RETRIEVED, onGetSavedStoryCount);			var numStories:int = e.data.storyQueryResults as int;			_storyCount = numStories;		}				///////////////////////////////////////////////						/**		 *  delete individual items		 */		final public function deleteStory(storyListing:Story):void{			storyDao.deleteStory(storyListing);		}						final public function deleteAllSavedStories():void{			//log("deleteAllSavedStories");			storyDao.deleteSavedStories();		}				///////////////////////////////////////////////				final private function receiveEvent(e:GenericDataEvent):void{			log("receiveEvent type:"+e.type);			//log(new Date());						switch(e.type){								//APPLICATION EVENTS				case AppEvents.STORY_ASSETS_LOADED:					var story:Story = e.data.story;					storyDao.insertNewStory(story);							break;			}		}			}	}/**********************************************/class SingletonEnforcer {	public function SingletonEnforcer():void {}}
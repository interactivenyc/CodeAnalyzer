package com.speakaboos.ipad.models.services{	import com.adobe.crypto.MD5;	import com.speakaboos.core.utils.UniqueID;	import com.speakaboos.ipad.controller.AppController;	import com.speakaboos.ipad.events.AppEvents;	import com.speakaboos.ipad.events.GenericDataEvent;	import com.speakaboos.ipad.events.LoginEvents;	import com.speakaboos.ipad.events.ModalEvents;	import com.speakaboos.ipad.models.data.ErrorStruct;	import com.speakaboos.ipad.models.data.ModalsInfo;	import com.speakaboos.ipad.models.data.UserProfile;	import flash.events.Event;	import flash.net.URLRequest;	import flash.net.URLVariables;		public class LoginService extends CoreService	{		private static var _instance:LoginService;				public static function get instantiated():Boolean {return Boolean(_instance)};		public function LoginService( enforcer:SingletonEnforcer ):void {			super();			if( enforcer == null ) throw new Error( "LoginService is a singleton class and should only be instantiated via its static getInstance() method" );		}		public static function getInstance():LoginService {			if( _instance == null ) {				_instance = new LoginService( new SingletonEnforcer() );				_instance.init();			}			return _instance;		}		public static function destroySingleton():void {			if (instantiated) _instance.destroy();		}				private function init():void {			urlRequest = new URLRequest(getBaseURL(true));			urlRequest.method = "POST";				addListeners();		}				private final function addListeners():void{			_eventDispatcher.addEventListener(LoginEvents.FORGOT_PASSWORD, receiveEvent);		}				private final function removeListeners():void{			_eventDispatcher.removeEventListener(LoginEvents.FORGOT_PASSWORD, receiveEvent);		}				final override public function destroy():void{			if (_instance) {				_instance = null;				removeListeners();				if (loader) {					loader.removeEventListener(Event.COMPLETE, onLogin);					//loader.removeEventListener(Event.COMPLETE, onCheckSession);					loader.removeEventListener(Event.COMPLETE, onLoginFbUser);					loader.removeEventListener(Event.COMPLETE, onStartFreeTrial);					loader = null;				}				super.destroy();			}		}				final public function receiveEvent(e:GenericDataEvent):void{			switch(e.type){				case LoginEvents.FORGOT_PASSWORD:					var strEmail:String = e.data.email as String;					forgotPassword(strEmail);					break;								default:						}		}				final public function login(userProfile:UserProfile):void {			//log("login");			if (AppController.inOfflineMode) {				_eventDispatcher.dispatchEvent(new GenericDataEvent(AppEvents.USER_READY));			} else {				var params:URLVariables = new URLVariables();				params.method = "login";				params.username = userProfile.email;				params.password = userProfile.password;								//log(params);								urlRequest.data = params;				loader.addEventListener(Event.COMPLETE, onLogin);				loader.load(urlRequest);			}		}									final public function checkSession(userProfile:UserProfile):void{			log("checkSession");						var params:URLVariables = new URLVariables();			params.method = "checksession";			params.session = userProfile.session;						log(params);						urlRequest.data = params;			loader.addEventListener(Event.COMPLETE, onLogin);			//loader.addEventListener(Event.COMPLETE, onCheckSession);			loader.load(urlRequest);		}						final public function registerAnonymousUser():void{						//log("registerAnonymousUser");			urlRequest.method = "POST";						//. ats (anonymous time stamp): current unix time stamp 			//. aid (anonymous id): <unique_id>|<hash>   ( hash = MD5(shared secret+timestamp) )						var secret:String = UniqueID.secret;						var strHwAddrHash:String = UniqueID.getUniqueIDHash();						//log("unique id: " + hwAddr);			//log("unique id hash: " + strHwAddrHash);						var strTime:String = new Date().time.toString();			var strHash:String = MD5.hash(secret + strTime);						/*			log("secret: " + secret);			log("timeStamp: " + strTime);			log("hash: " + strHash);			*/						var strData:String = (strHwAddrHash + '|' + strHash);			//log("hash string: " + strData);						var params:URLVariables = new URLVariables();			params.method = "ca";			params.ats = strTime;			params.aid = strData;			//log("param string: " + params);						urlRequest.data = params;			loader.addEventListener(Event.COMPLETE, onLogin);			//loader.addEventListener(Event.COMPLETE, onRegisterAnonymousUser);			loader.load(urlRequest);										}						final private function onLogin(e:Event):void{			log("onLogin");			loader.removeEventListener(Event.COMPLETE, onLogin);						var jsonString:String = loader.data;			var jsonData:Object = JSON.parse(jsonString);						log(jsonData);						if(responseOK(jsonData)){				var userProfile:UserProfile = AppController.getInstance().getUserProfile();//new UserProfile();				userProfile.initWithData(jsonData);								//user testing				//				userProfile.subscription_type = "itunes" //"chargify" | "itunes"				//				userProfile.subscription_state = "active" //"expired" | "active"				//				userProfile.email = null;								//UserProfileImpl.getInstance().userProfile = userProfile;				_eventDispatcher.dispatchEvent(new GenericDataEvent(AppEvents.LOGIN_SUCCESS, {userProfile:userProfile}));					}			else{				var thisError:ErrorStruct = getErrorStructFromJsonData(jsonData);				_eventDispatcher.dispatchEvent(new GenericDataEvent(AppEvents.LOGIN_ERROR, {error:thisError}));					}					}						/*		final private function onCheckSession(e:Event):void{			log("onCheckSession");			loader.removeEventListener(Event.COMPLETE, onCheckSession);						var userProfile:UserProfile = AppController.getInstance().getUserProfile();						var jsonString:String = loader.data;			var jsonData:Object = JSON.parse(jsonString);						log(jsonData);						if(responseOK(jsonData)){				userProfile.updateWithData(jsonData);				_eventDispatcher.dispatchEvent(new GenericDataEvent(AppEvents.LOGIN_SUCCESS, {userProfile:userProfile}));					}			else{				var thisError:ErrorStruct = getErrorStructFromJsonData(jsonData);				_eventDispatcher.dispatchEvent(new GenericDataEvent(AppEvents.LOGIN_ERROR, {error:thisError}));					}					}		*/						final public function logOut(session:String):void{						//log("logout");						var params:URLVariables = new URLVariables();			params.method = "logout";			params.format = "json";			params.session = session;						//log(params);						urlRequest.data = params;						loader.addEventListener(Event.COMPLETE, onLogout);			loader.load(urlRequest);					}				final private function onLogout(e:Event):void{			//log("onLogout");			loader.removeEventListener(Event.COMPLETE, onLogout);						var jsonString:String = loader.data;			var jsonData:Object = JSON.parse(jsonString);			log(jsonData);						if(responseOK(jsonData)){				//log("logged out");				_eventDispatcher.dispatchEvent(new GenericDataEvent(LoginEvents.USER_LOGGED_OUT));			}			else {				//log("unkown logout error");				var thisError:ErrorStruct = getErrorStructFromJsonData(jsonData);				_eventDispatcher.dispatchEvent(new GenericDataEvent(LoginEvents.LOGOUT_ERROR, {error:thisError}));			}					}						final public function signup(userProfile:UserProfile):void		{				//log("signup new");						_tempDataStore = userProfile;						//http://test-api.speakaboos.com/ws/v1?format=xml&method=register&fbid=123						var params:URLVariables = new URLVariables();			params.method = "register";			params.format = "json";			params.username = userProfile.email;			params.password = userProfile.password;			params.fbid = "";			//log(params);						/**** USE THIS ONCE READY FOR PRODUCTION			 *** params.device_id = networkInfo.deviceID;			 *************/						urlRequest.data = params;			urlRequest.method = "POST";						loader.addEventListener(Event.COMPLETE, onSignup);			loader.load(urlRequest);		}				final private function onSignup(e:Event):void{			//log("onSignup");			loader.removeEventListener(Event.COMPLETE, onSignup);						var jsonString:String = loader.data;			var jsonData:Object = JSON.parse(jsonString);			//log(jsonData);							if(responseOK(jsonData)){				var userProfile:UserProfile = _tempDataStore as UserProfile;				userProfile.initWithData(jsonData);				//UserProfileImpl.getInstance().userProfile = userProfile;				//userProfile.user_id = jsonData.response.user_id;				_eventDispatcher.dispatchEvent(new GenericDataEvent(LoginEvents.USER_SIGNED_UP, {userProfile:userProfile}));			}			else{								var thisError:ErrorStruct = getErrorStructFromJsonData(jsonData);				_eventDispatcher.dispatchEvent(new GenericDataEvent(LoginEvents.SIGNUP_ERROR, {error:thisError}));			}		}						final public function signUpFBUser(userProfile:UserProfile):void{						// fbUser is authenticated with facebook but must obtain a speakaboos account						//log("signUpFbUser");			loginFbUser(userProfile);				}										final public function loginFbUser(userProfile:UserProfile):void{						// log in the facebook user in to speakaboos and obtain a session			//log("loginFbUser");			//log("userProfile.fb_id: " + userProfile.fb_id);			_tempDataStore = userProfile;						//temporary function to obtain fb username and password for backend			var fbHash:String = getFbLoginHash(userProfile);						var params:URLVariables = new URLVariables();			params.method = "login";			params.fbid = userProfile.fb_id;			params.hash = fbHash;						//log(params);						urlRequest.data = params;			loader.addEventListener(Event.COMPLETE, onLoginFbUser);			loader.load(urlRequest);										}						final private function onLoginFbUser(e:Event):void{					// callback for signUpFBUser()			//log("onLoginFbUser");			loader.removeEventListener(Event.COMPLETE, onLoginFbUser);						var jsonString:String = loader.data;			var jsonData:Object = JSON.parse(jsonString);			//log(jsonData);						if(responseOK(jsonData)){								var userProfile:UserProfile = _tempDataStore as UserProfile;				//var userProfile = UserProfileImpl.getInstance().userProfile;				userProfile.updateWithData(jsonData);				//userProfile.fb_id = prevProfile.fb_id;				//UserProfileImpl.getInstance().userProfile = userProfile;				_eventDispatcher.dispatchEvent(new GenericDataEvent(LoginEvents.USER_LOGGED_IN, {userProfile:userProfile}));			}			else {				_eventDispatcher.dispatchEvent(new GenericDataEvent(ModalEvents.SHOW_MODAL, {id:ModalsInfo.ERROR_MISC_ID,  message:jsonData.response.error}));			}								}				final public function startFreeTrial(userProfile:UserProfile):void{					//log("starFreeTrial");			//temporary function to obtain fb username and password for backend			//var loginCreds:Object = getFbLoginCredentials(userProfile);						var params:URLVariables = new URLVariables();			params.method = "startFreeTrial";			/*			params.username = "bf23f940fc224ead482420760fb602a7@speakaboos.com"//loginCreds.userName;			params.password = "091952fb44502bcadd5bab0f7d3dd37a";//loginCreds.password;			params.device_id = "12345";			*/			params.session = userProfile.session;			//log(params);						urlRequest.data = params;			urlRequest.method = "POST";			loader.addEventListener(Event.COMPLETE, onStartFreeTrial);			loader.load(urlRequest);		}				final private function onStartFreeTrial(e:Event):void{			//log("onStartFreeTrial");			loader.removeEventListener(Event.COMPLETE, onStartFreeTrial);						var jsonString:String = loader.data;			var jsonData:Object = JSON.parse(jsonString);			//log(jsonData);						// TODO			//need to move this information to the db somehow								}				final private function getFbLoginHash(userProfile:UserProfile):String{			// user name= md5(facebook_id)@speakaboos.com			// password= md5($secret.$username);			// facebook secret.  bb3fa506c59487bf5037fc3bd9cdcc90								var secret:String = "bb3fa506c59487bf5037fc3bd9cdcc90";			var fbid:String = userProfile.fb_id;			var hash:String = MD5.hash(fbid + secret);						return hash;					}						final public function forgotPassword(userName:String):void{			//http://test-api.speakaboos.com/ws/v1?method=resetpasswd&format=xml&username=XXX@YYYY.com			log("forgotPassword");								urlRequest.method = "POST";						var params:URLVariables = new URLVariables();			params.method = "resetpasswd";			params.username = userName;						//log(params);						urlRequest.data = params;			loader.addEventListener(Event.COMPLETE, onForgotPassword);			loader.load(urlRequest);										}				final private function onForgotPassword(e:Event):void{						log("onForgotPassword");			loader.removeEventListener(Event.COMPLETE, onForgotPassword);						var jsonString:String = loader.data;			var jsonData:Object = JSON.parse(jsonString);			log(jsonData);						//TODO			// remove new password from returned json data (back end task)						//TODO			//Handle error state.  Check for success			if(responseOK(jsonData)){				var strResult:String = jsonData.response.status;				_eventDispatcher.dispatchEvent(new GenericDataEvent(LoginEvents.FORGOT_PASSWORD_SENT, {result:strResult}));						}else{								var thisError:ErrorStruct = getErrorStructFromJsonData(jsonData);				_eventDispatcher.dispatchEvent(new GenericDataEvent(LoginEvents.FORGOT_PASSWORD_ERROR, {error:thisError}));			}										}						/*		final private function onRegisterAnonymousUser(e:Event):void{						//log("onRegisterAnonymousUser");						loader.removeEventListener(Event.COMPLETE, onRegisterAnonymousUser);						var jsonString:String = loader.data;			var jsonData:Object = JSON.parse(jsonString);			log(jsonData);									if(responseOK(jsonData)){				//log('anonymous user created successfully');				var userProfile:UserProfile = new UserProfile();				userProfile.initWithData(jsonData);				_eventDispatcher.dispatchEvent(new GenericDataEvent(LoginEvents.ANONYMOUS_USER_LOGGED_IN, {userProfile:userProfile}));					}			else{				//log("error creating anonymous user");					var thisError:ErrorStruct = getErrorStructFromJsonData(jsonData);				_eventDispatcher.dispatchEvent(new GenericDataEvent(LoginEvents.LOGIN_ERROR, {error:thisError}));					}			}		*/				final public function updateUserAccount(u:UserProfile, newName:String, newPw:String):void{					//http://test-api.speakaboos.com/ws/V2?format=xml&method=ua&session=518aa55f4ef93&spu=bbb@gmail.com&spp=1234									urlRequest.method = "POST";						var params:URLVariables = new URLVariables();			params.method = "ua";			params.session = u.session;			params.spu = newName;			params.spp = newPw;						log(params);						urlRequest.data = params;			loader.addEventListener(Event.COMPLETE, onUpdateUserAccount);			loader.load(urlRequest);										}						final private function onUpdateUserAccount(e:Event):void{			//log("onUpdateUserAccount");						loader.removeEventListener(Event.COMPLETE, onUpdateUserAccount);						var jsonString:String = loader.data;			var jsonData:Object = JSON.parse(jsonString);			log(jsonData);									if(responseOK(jsonData)){				//log('user account updated successfully');				var userProfile:UserProfile = new UserProfile();				userProfile.initWithData(jsonData);				_eventDispatcher.dispatchEvent(new GenericDataEvent(LoginEvents.UPDATE_USER_SUCCEEDED, {userProfile:userProfile}));					}			else{				//log("error updating user account");					var thisError:ErrorStruct = getErrorStructFromJsonData(jsonData);				_eventDispatcher.dispatchEvent(new GenericDataEvent(LoginEvents.UPDATE_USER_FAILED, {error:thisError}));					}							}							}}class SingletonEnforcer {	public function SingletonEnforcer():void {}}
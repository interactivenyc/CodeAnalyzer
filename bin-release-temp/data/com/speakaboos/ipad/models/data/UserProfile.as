package com.speakaboos.ipad.models.data{	import com.speakaboos.ipad.BaseClass;	import com.speakaboos.ipad.utils.ObjectUtils;	import com.speakaboos.ipad.utils.Validation;	public class UserProfile extends BaseClass	{				public var user_id:String;		public var session:String;		public var fb_id:String;				//USER NODE		public var firstname:String;		public var lastname:String;		public var email:String;		public var password:String;				//SUBSCRIPTION NODE		public var subscription_type:String;		public var subscription_state:String;		public var free_trial_used:String;				//SUBSCRIPTION TIME		public var days_left:String;		public var expiration_date:String;		public var seconds_left:int;		public var expiration_date_seconds:uint;				//TIME DATA WAS GENERATED (SERVER TIME)		public var update_time:uint;						public function UserProfile(){}				public function initWithData(data:Object):void{			//log("initWithData");			//log(data);						if (data.response.user == null) return;									var strFirstName:String = (data.response.user.profile != null) ? ObjectUtils.getSafeParameter(data.response.user.profile,"first_name") : "";			var strLastName:String = (data.response.user.profile != null) ? ObjectUtils.getSafeParameter(data.response.user.profile,"last_name") : "";			var strEmail:String = (data.response.user.profile != null) ? ObjectUtils.getSafeParameter(data.response.user.profile,"email") : "";			var strFBID:String = ObjectUtils.getSafeParameter(data.response.user.profile,"fbid");						var strExpirationSeconds:String = (data.response.user.subscription != null) ? ObjectUtils.getSafeParameter(data.response.user.subscription,"expired_date_seconds") : "";			strExpirationSeconds = ((strExpirationSeconds == null) || (strExpirationSeconds == "")) ? "0" : strExpirationSeconds;						var strExpirationDate:String = (data.response.user.subscription != null) ? ObjectUtils.getSafeParameter(data.response.user.subscription,"expired_date_gmt") : "";			strExpirationDate = ((strExpirationDate == null) || (strExpirationDate == "")) ? "" : strExpirationDate;						var strSecondsLeft:String = (data.response.user.subscription != null) ? ObjectUtils.getSafeParameter(data.response.user.subscription,"seconds_left") : "";			strSecondsLeft = ((strSecondsLeft == null) || (strSecondsLeft == "")) ? "0" : strSecondsLeft;						var strTimeStamp:String = ObjectUtils.getSafeParameter(data.response,"time");				strTimeStamp = ((strTimeStamp == null) || (strTimeStamp == "")) ? "" : strTimeStamp;									log("initWithData: got exp seconds '" + strExpirationSeconds + "'");			log("initWithData: got exp date'" + strExpirationDate + "'");			log("strExpirationDate == null: " + (strExpirationDate == null));						user_id = data.response.user.id;			session = data.response.session;			firstname = strFirstName;			lastname = strLastName;			email = strEmail;			subscription_type = data.response.user.subscription.type;			subscription_state = data.response.user.subscription.state;			days_left = data.response.user.subscription.days_left;			free_trial_used = data.response.user.subscription.free_trial_used;			if(isPopulated(strFBID)){ fb_id = strFBID;}			expiration_date_seconds = uint(strExpirationSeconds);			expiration_date = strExpirationDate;			seconds_left = int(strSecondsLeft);						//if timestamp was generated on server, use it			update_time = (strTimeStamp != "") ? uint(strTimeStamp) : uint(new Date().time);						log("initWithData: update_time: " + update_time);									log("initWithData \n" + ObjectUtils.getGenericObject(this))		}				public function initFromDB(data:Object):void{			log("initFromDB");			log(data);						user_id = data.user_id;			session = data.session;			firstname = data.firstname;			lastname = data.lastname;			email = data.email;			subscription_type = data.subscription_type;			subscription_state = data.subscription_state;			days_left = data.days_left;			free_trial_used = data.free_trial_used;			fb_id = data.fb_id;						expiration_date_seconds = data.expiration_date_seconds;			expiration_date = expiration_date;			seconds_left = data.seconds_left;			update_time = data.update_time;					}				public function initWithFbData(data:Object):void{			//log("initWithFbData");			//log(data);						//user_id = data.id;			fb_id = data.id;			session = "0";//data.response.session;			firstname = data.properties.first_name;			lastname = data.properties.last_name;			email = "";//data.response.user.profile.email;			subscription_type = null;//data.response.user.subscription.type;			subscription_state = null;//data.response.user.subscription.state;			days_left = null;//data.response.user.subscription.days_left;			free_trial_used = null;//data.response.user.subscription.free_trial_used;						expiration_date_seconds = 0;			expiration_date = null;						//log("initWithFbData \n" + ObjectUtils.getGenericObject(this))		}				public function updateWithData(data:Object):void{						//update userprofile if data is contained in object			try{				var strFirstName:String = ObjectUtils.getSafeParameter(data.response.user.profile,"first_name");				var strLastName:String = ObjectUtils.getSafeParameter(data.response.user.profile,"last_name");				var strEmail:String = ObjectUtils.getSafeParameter(data.response.user.profile,"email");				var strFBID:String = ObjectUtils.getSafeParameter(data.response.user.profile,"fbid");								var strExpirationSeconds:String = (data.response.user.subscription != null) ? ObjectUtils.getSafeParameter(data.response.user.subscription,"expired_date_seconds") : "";				strExpirationSeconds = ((strExpirationSeconds == null) || (strExpirationSeconds == "")) ? "0" : strExpirationSeconds;								var strExpirationDate:String = (data.response.user.subscription != null) ? ObjectUtils.getSafeParameter(data.response.user.subscription,"expired_date_gmt") : "";				strExpirationDate = ((strExpirationDate == null) || (strExpirationDate == "")) ? "" : strExpirationDate;								var strSecondsLeft:String = (data.response.user.subscription != null) ? ObjectUtils.getSafeParameter(data.response.user.subscription,"seconds_left") : "";				strSecondsLeft = ((strSecondsLeft == null) || (strSecondsLeft == "")) ? "0" : strSecondsLeft;								var strTimeStamp:String = ObjectUtils.getSafeParameter(data.response,"time");				strTimeStamp = ((strTimeStamp == null) || (strTimeStamp == "")) ? "" : strTimeStamp;												log("updateWithData: got exp seconds '" + strExpirationSeconds + "'");				log("updateWithData: got exp date'" + strExpirationDate + "'");				log("updateWithData == null: " + (strExpirationDate == null));							if(isPopulated(data.response.user.id)){user_id = data.response.user.id;}				if(isPopulated(data.response.session)){ session = data.response.session;}				if(isPopulated(strFirstName)){ firstname = strFirstName;}				if(isPopulated(strLastName)){ lastname = strLastName;}				if(isPopulated(strEmail)){ email = strEmail;}				if(isPopulated(data.response.user.subscription.type)){ subscription_type = data.response.user.subscription.type;}				if(isPopulated(data.response.user.subscription.state)){ subscription_state = data.response.user.subscription.state;}				if(isPopulated(data.response.user.subscription.days_left)){ days_left = data.response.user.subscription.days_left;}				if(isPopulated(data.response.user.subscription.free_trial_used)){ free_trial_used = data.response.user.subscription.free_trial_used;}				if(isPopulated(strFBID)){ fb_id = strFBID;}								expiration_date_seconds = uint(strExpirationSeconds);				expiration_date = strExpirationDate;				seconds_left = int(strSecondsLeft);				//if timestamp was generated on server, use it				update_time = (strTimeStamp != "") ? uint(strTimeStamp) : uint(new Date().time);				log("updateWithData: update_time: " + update_time);			} 			catch(e:Error){				log("Error: "+e.message);			}					}				public function getExpirationDate():String{					log("getExpirationDate()");					var retVal:String = "";			var d:Date;						if(expiration_date_seconds && expiration_date_seconds != 0){				 d = new Date(expiration_date_seconds * 1000);				retVal = formatExpData(d);			}else if(seconds_left){				log("using upate time: " + update_time + ", seconds left: " + seconds_left + ", total: " + (update_time + seconds_left));				d = new Date((update_time + seconds_left) * 1000);				retVal = formatExpData(d);			}else{				retVal = "renewal date N/A"			}										return retVal;				}				private function formatExpData(d:Date):String {			var monthName:String = ["January","February","March","April","May","June","July","August","September","October","November","December"][d.month];			return monthName + " " + d.date + ", " + d.fullYear;		}				public function getDaysLeft():String{			var updateDate:Date = new Date(update_time);			var str:String = days_left + " days left as of " + updateDate.toTimeString();						return str;		}		 						/*				response: {		[ LoginService ] 		session: "50ea502c480c4"		[ LoginService ] 		status: "ok"		[ LoginService ] 		code: 200		[ LoginService ] 		user: {		[ LoginService ] 			subscription: {		[ LoginService ] 				state: "active"		[ LoginService ] 				type: "itunes"		[ LoginService ] 				days_left: 1		[ LoginService ] 				free_trial_used: 1		[ LoginService ] 			}		[ LoginService ] 			profile: {		[ LoginService ] 				email: "thierrys2k@yahoo.com"		[ LoginService ] 				first_name: "Thierry"		[ LoginService ] 				last_name: "Sansaricq"		[ LoginService ] 			}		[ LoginService ] 			id: "111299"		[ LoginService ] 		}				*/				public function clear():void{			user_id = null;			fb_id = null;			clearSession();			firstname = null;			lastname = null;			email = "";//data.response.user.profile.email;			subscription_type = null;//data.response.user.subscription.type;			subscription_state = null;//data.response.user.subscription.state;			days_left = null;//data.response.user.subscription.days_left;			free_trial_used = null;//data.response.user.subscription.free_trial_used;			expiration_date = null;			expiration_date_seconds = 0;			seconds_left = 0;			update_time = new Date().time as uint;				}				public function clearSession():void{			session = "0";		}				//convenience function		private function isPopulated(str:String):Boolean{			return (Validation.isNotEmpty(str));		}						}}
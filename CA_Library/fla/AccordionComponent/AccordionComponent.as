package// original code by Ady Levy - adylevy.com// custom mods for outside created panel objects - Alan Gruskoff - digitalshowcase.biz{	import caurina.transitions.Tweener;	import PanelSprite;  // separate subclass to add panelNumber property to Sprite	import flash.events.*;	import flash.display.Sprite;		public class AccordionComponent extends Sprite	{		private var panelNumber:Number;		private var mywidth:Number;		private var myheight:Number;		private var navH:Number;		public var currPanel:Number;		public static const EVENT_ON_CHANGE = "change";// instantiate an accordion object here, then add panels to that object		public function AccordionComponent($width:Number, $height:Number, navHeight:Number)		{			mywidth  = $width;			myheight = $height;			navH = navHeight;						this.graphics.beginFill(0xFF0000);		// used for masking			this.graphics.drawRect(0,0, mywidth, myheight);			this.graphics.endFill();						var mk:Sprite = new Sprite();			mk.graphics.beginFill(0xFF0000);			mk.graphics.drawRect(0,0, mywidth, myheight);			mk.graphics.endFill();			this.addChild(mk);		// makes this mask the first child			this.mask = mk;		}// a fully configured sprite is passed in here to add to the accordion object		public function addPanel(_spr:Sprite)		{			this.addChild(_spr);			_spr.x = 0;			_spr.y = (this.numChildren - 2) * navH;		}						public function openPanel(pNumber:Number):void		{			var obj:Object;			var i:int;// give all panel headers a click listener			for (i = 1; i < this.numChildren; i++) {				obj = this.getChildAt(i) as Sprite;				obj.getChildByName("btn").addEventListener(MouseEvent.CLICK, handleOpenClick);				obj.getChildByName("btn").buttonMode = true;			}// whack the listener on the current panel header			obj = this.getChildAt(pNumber) as Sprite;			obj.getChildByName("btn").buttonMode = false;			obj.getChildByName("btn").removeEventListener(MouseEvent.CLICK, handleOpenClick);// tween the panels  after the current panel			for (i = pNumber + 1; i < this.numChildren; i++) {				obj = this.getChildAt(i);				Tweener.addTween(obj, {y:myheight - (this.numChildren - i) * navH, time:1.0, transition:"easeOutCubic", rounded:true});			}// tween the panels before the current panel			for (i = 1; i <= pNumber; i++) {				obj = this.getChildAt(i);				Tweener.addTween(obj, {y:(i - 1) * navH, time:1.0, transition:"easeOutCubic", rounded:true});			}			currPanel = pNumber;			dispatchEvent(new Event(EVENT_ON_CHANGE));		}				private function handleOpenClick(evt:Event)		{			if (evt.target.panelNumber) {				// trace("opening Panel:" + evt.target.panelNumber);						openPanel(evt.target.panelNumber);			}		}	}}
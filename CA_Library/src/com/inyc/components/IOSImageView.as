package com.inyc.components		/**	 * Original code can be found at:	 * http://supportforums.blackberry.com/t5/Adobe-AIR-Development/Pinch-Zoom-Pan-Image-Viewer/td-p/1127637	 */{	import com.inyc.core.CoreMovieClip;	import com.inyc.utils.MovieClipUtils;		import flash.display.BitmapData;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.TransformGestureEvent;	import flash.geom.Matrix;
	import com.inyc.codeanalyzer.CodeAnalyzer;
		public class IOSImageView extends CoreMovieClip	{		public var mData:BitmapData = null;		private var mDefaultMatrix:Matrix;		private var mCanvasWidth:int = 0;		private var mCanvasHeight:int = 0;		//private var mCanvas:Sprite;		private var mTouchCount:int = 0;		private var mTouchX:Number = -1;		private var mTouchY:Number = -1;				protected var _bg:MovieClip;				public function IOSImageView(){			mData = null;						this.addEventListener(TransformGestureEvent.GESTURE_ZOOM, onZoom);			this.addEventListener(TransformGestureEvent.GESTURE_PAN, onPan);		}				override protected function onAddedToStage(e:Event):void{			super.onAddedToStage(e);						scaleX = CodeAnalyzer.SCALE_X;			scaleY = CodeAnalyzer.SCALE_Y;						var bgWidth:int = stage.stageWidth/scaleX;			var bgHeight:int = stage.stageHeight/scaleY;						_bg = MovieClipUtils.getFilledMC(bgWidth, bgHeight, 0xFFE9E0, true);			addChild(_bg);						log("stage.width: "+stage.stageWidth+", stage.height: "+stage.stageHeight);		}				public function setSize(width:int, height:int):void		{			mCanvasWidth = width;			mCanvasHeight = height;						if(mData != null)			{				scaleX = mCanvasWidth / mData.width;				scaleY = mCanvasHeight / mData.height;				x = 0;				y = 0;			}		}						private function onZoom(e:TransformGestureEvent):void{			e.stopImmediatePropagation();						var affineTransform:Matrix = transform.matrix;						// move the object to (0/0) relative to the origin			affineTransform.translate( -e.stageX, -e.stageY );						// scale			affineTransform.scale(e.scaleX, e.scaleY );						// move the object back to its original position			affineTransform.translate( e.stageX, e.stageY );						// apply the new transformation to the object			transform.matrix = affineTransform;		}						private function onPan(e:TransformGestureEvent):void{			x += e.offsetX * scaleX * 2;			y += e.offsetY * scaleY * 2;		}							}}